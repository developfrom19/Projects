CLASS zcl_mss_calendar DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .
  PUBLIC SECTION.
    INTERFACES /neptune/if_nad_server .
    TYPES:
      BEGIN OF ty_calendar,
        date TYPE dats,
        type TYPE string,
      END OF ty_calendar .
    TYPES:
      BEGIN OF ty_test_data,
        name  TYPE string,
        date  TYPE dats,
        ctype TYPE string,
      END OF ty_test_data .
    TYPES:
      BEGIN OF ty_finaltable,
        pernr            TYPE catsdb-pernr,
        ename            TYPE pa0001-ename,
        ondate           TYPE string,
        e_type           TYPE string,
        e_type_detail    TYPE string,
        actual_startdate TYPE string,
        actual_enddate   TYPE string,
        icon             TYPE string,
      END OF ty_finaltable .
    TYPES:
      BEGIN OF ty_legend,
        groupby_i(1) TYPE c,
        icon         TYPE string,
        text         TYPE string,
      END OF ty_legend .
    TYPES:
      BEGIN OF ty_dates,
        dt TYPE sy-datum,
      END OF ty_dates .
    TYPES:
      BEGIN OF ty_month,
        name  TYPE string,
        value TYPE sy-datum,
      END OF ty_month .

    DATA:
      it_legend TYPE STANDARD TABLE OF ty_legend .
    DATA wa_legend TYPE ty_legend .
    DATA:
      gt_finaltable TYPE STANDARD TABLE OF ty_finaltable .
    DATA gs_finaltable TYPE ty_finaltable .
    DATA:
      it_data TYPE STANDARD TABLE OF ty_test_data .
    DATA:
      wa_data LIKE LINE OF it_data .
    DATA:
      it_calendar TYPE STANDARD TABLE OF ty_calendar .
    DATA:
      wa_calendar LIKE LINE OF it_calendar .
    DATA:
      gt_list     TYPE TABLE OF hrwpc_s_allcont .
    DATA:
      t_d TYPE TABLE OF ty_dates .
    DATA:
      w_d LIKE LINE OF t_d .
    DATA:
      it_month TYPE STANDARD TABLE OF ty_month .
    DATA wa_month TYPE ty_month .
  PROTECTED SECTION.
private section.

  methods TABLE_LEGEND .
  methods GET_CALENDAR
    importing
      !AJAX_VALUE type STRING .
  methods DIFFERENCE_BW_DATES
    importing
      !SD type SY-DATUM
      !ED type SY-DATUM .
  methods CHANGE_DATE_FORMAT
    importing
      !DATE1 type SY-DATUM
      !DATE2 type SY-DATUM optional
    exporting
      !OUT_DATE1 type STRING
      !OUT_DATE2 type STRING .
ENDCLASS.



CLASS ZCL_MSS_CALENDAR IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_MSS_CALENDAR->/NEPTUNE/IF_NAD_SERVER~HANDLE_ON_AJAX
* +-------------------------------------------------------------------------------------------------+
* | [--->] APPLID                         TYPE        STRING
* | [--->] AJAX_ID                        TYPE        STRING
* | [--->] AJAX_VALUE                     TYPE        STRING
* | [--->] SERVER                         TYPE REF TO /NEPTUNE/CL_NAD_SERVER
* | [--->] REQUEST                        TYPE        /NEPTUNE/DATA_REQUEST
* | [<-->] NAVIGATION                     TYPE        /NEPTUNE/AJAX_NAVIGATION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD /neptune/if_nad_server~handle_on_ajax.
    CASE ajax_id.
      WHEN 'GET_CALENDAR'.
        CALL METHOD get_calendar( ajax_value ).
      WHEN 'TABLE_LEGEND'.
        CALL METHOD table_legend( ).
    ENDCASE.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_MSS_CALENDAR->/NEPTUNE/IF_NAD_SERVER~HANDLE_ON_SYNC_OUT
* +-------------------------------------------------------------------------------------------------+
* | [--->] APPLID                         TYPE        STRING
* | [--->] LASTSYNCDATE                   TYPE        STRING
* | [--->] SERVER                         TYPE REF TO /NEPTUNE/CL_NAD_SERVER
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD /neptune/if_nad_server~handle_on_sync_out.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_MSS_CALENDAR->CHANGE_DATE_FORMAT
* +-------------------------------------------------------------------------------------------------+
* | [--->] DATE1                          TYPE        SY-DATUM
* | [--->] DATE2                          TYPE        SY-DATUM(optional)
* | [<---] OUT_DATE1                      TYPE        STRING
* | [<---] OUT_DATE2                      TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD change_date_format.
    IF date1 IS NOT INITIAL.
      CONCATENATE date1+4(2) '/' date1+6(2) '/' date1(4) INTO out_date1.
    ENDIF.

    IF date2 IS NOT INITIAL.
      CONCATENATE date2+4(2) '/' date2+6(2) '/' date2(4) INTO out_date2.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_MSS_CALENDAR->DIFFERENCE_BW_DATES
* +-------------------------------------------------------------------------------------------------+
* | [--->] SD                             TYPE        SY-DATUM
* | [--->] ED                             TYPE        SY-DATUM
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD difference_bw_dates.
    DATA: diff_days(3) TYPE c,
          index        TYPE i VALUE '1'.
    REFRESH t_d.
    CLEAR w_d.
    IF ed > sd.
      diff_days = ed - sd.
      DO diff_days - 1 TIMES.
        w_d-dt = sd + index.
        IF w_d-dt GE ed.
          EXIT.
        ELSE.
          APPEND w_d TO t_d.
          CLEAR w_d.
          index = index + 1.
        ENDIF.
      ENDDO.
      w_d-dt = sd.
      APPEND w_d TO t_d.
      CLEAR w_d.
      w_d-dt = ed.
      APPEND w_d TO t_d.
      CLEAR w_d.
      SORT t_d.
    ELSE.
      w_d-dt = sd.
      APPEND w_d TO t_d.
      CLEAR w_d.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_MSS_CALENDAR->GET_CALENDAR
* +-------------------------------------------------------------------------------------------------+
* | [--->] AJAX_VALUE                     TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_calendar.

    TYPES:BEGIN OF ty_travel,
            actiondate TYPE sy-datum.
            INCLUDE TYPE ptrv_perio.
    TYPES: END OF ty_travel.

    TYPES: BEGIN OF ty_absences,
             actiondate TYPE sy-datum.
            INCLUDE TYPE pa2001.
    TYPES: END OF ty_absences.

    TYPES: BEGIN OF ty_dates,
             date TYPE sy-datum,
           END OF ty_dates.

    TYPES: BEGIN OF im_team ,
             viewgroup   TYPE hrwpc_orgviewgrp,
             viewid      TYPE hrwpc_orgview,
             selid_group TYPE hr_sel_groupid,
             selid       TYPE hr_selid,
           END OF im_team.


    TYPES: BEGIN OF ty_additional_data,
             pernr        TYPE pa2001-pernr,
             subty        TYPE pa2001-subty,
             begda        TYPE pa2001-begda,
             endda        TYPE pa2001-endda,
             desc         TYPE string,
             attabs_hours TYPE stdaz,
             actiondate   TYPE sy-datum,
           END OF ty_additional_data.

    DATA: lv_pernr    TYPE pa0105-pernr,
          lv_date_s   TYPE sy-datum,
          lv_date_e   TYPE sy-datum,
          lv_info     TYPE pa0001-ename,
          lv_hours    TYPE string,
          lt_obj_dir  TYPE TABLE OF hrwpc_s_keyobjec,
          ls_obj_dir  TYPE hrwpc_s_keyobjec,
          lt_content  TYPE  TABLE OF hrwpc_s_allcont,
          lt_content1 TYPE  TABLE OF hrwpc_s_allcont,
          ls_content  TYPE  hrwpc_s_allcont,
          ls_1000     TYPE hrp1000,
          lv_objid    TYPE hrobjid,
          ws_return   TYPE bapiret2,
          gt_obj_dir  TYPE TABLE OF hrwpc_s_keyobjec,
          pv_viewid   TYPE hrwpc_viewid.



    DATA: it_eventsdate      TYPE STANDARD TABLE OF hrwpc_s_rd_reminderdate,
          wa_eventsdate      LIKE LINE OF it_eventsdate,
          it_pernr           TYPE STANDARD TABLE OF hrwpc_s_personnelnumber,
          wa_pernr           TYPE hrwpc_s_personnelnumber,
          it_timedata        TYPE STANDARD TABLE OF catsdb,
          wa_timedata        TYPE catsdb,
          it_absences        TYPE STANDARD TABLE OF p2001,
          wa_absences        TYPE p2001,
          it_travel          TYPE STANDARD TABLE OF ptp42, "ptrv_perio,
          wa_travel          TYPE ptp42, "ptrv_perio,
          lv_kunde           TYPE ptrv_head-kunde,
          it_reminderdates   TYPE STANDARD TABLE OF pa0019,
          wa_reminderdates   TYPE pa0019,
          wa_ex_all_my_reqs1 TYPE  ptarq_p2001_struc,
          wa_ex_all_my_reqs2 TYPE ptarq_p2002_struc.

*        add_to_calendar(1) TYPE c.  "Indicator to add date record in Calendar

    DATA: iv         TYPE i VALUE 0,
          gt_dates   TYPE STANDARD TABLE OF ty_dates,
          gs_dates   LIKE LINE OF gt_dates,
          total_days TYPE p.

    DATA :t               TYPE REF TO cl_pt_arq_reqs_list,
          ld_im_pernr_tab TYPE ptim_pernr_tab,
          wa_status_range TYPE rsdsselopt,
          status_range    TYPE rseloption.


    DATA wa_im_team TYPE im_team.

    DATA  static_pernr_tab TYPE ptim_pernr_tab.
    DATA: lt_ex_all_my_reqs TYPE ptarq_reqlist_tab_flat,
          ls_ex_all_my_reqs TYPE LINE OF ptarq_reqlist_tab_flat.
    DATA: lv_cal_date TYPE sy-datum.
    DATA w_attribs_tab TYPE name2value.
    DATA t_attribs_tab TYPE STANDARD TABLE OF name2value.
    DATA t_item_tab TYPE ptreq_items_tab_flat.
    DATA w_item_tab TYPE LINE OF ptreq_items_tab_flat.
    DATA w_attribs_tabs TYPE LINE OF name2value_table.
    DATA: lv TYPE pernr.
    DATA lv_temp_date TYPE string.

    DATA : it_additional_data TYPE STANDARD TABLE OF ty_additional_data,
           wa_additional_data TYPE ty_additional_data,
           l_years            TYPE vtbbewe-atage.

    DATA: l_companycode TYPE pa0001-bukrs,
          l_calendar_id TYPE scal-hcalid,
          it_holidays   TYPE STANDARD TABLE OF iscal_day,
          wa_holidays   TYPE iscal_day,
          l_servicedate TYPE p0000-begda,
          lv_text       TYPE t531s-tmtxt,
          lv_termn      TYPE string.


    DATA: t_pernr  TYPE ptp42-pernr,
          it_perio TYPE STANDARD TABLE OF ptp42,
          it_head  TYPE STANDARD TABLE OF ptp02.

    DATA: diff(3) TYPE c,
          lv_n(3) TYPE c.


    SPLIT ajax_value AT '-' INTO lv_cal_date pv_viewid.



*Start date and end date for the selected/current month
    CALL FUNCTION 'HR_JP_MONTH_BEGIN_END_DATE'
      EXPORTING
        iv_date             = lv_cal_date
      IMPORTING
        ev_month_begin_date = lv_date_s
        ev_month_end_date   = lv_date_e.

*lv_date_s = lv_date_s - 7.
*lv_date_e = lv_date_e + 7.
*Get number of days for the selected/current month
    CALL FUNCTION 'HR_E_NUM_OF_DAYS_OF_MONTH'
      EXPORTING
        p_fecha        = sy-datum
      IMPORTING
        number_of_days = total_days.

*Internal table to store all dates of month
    DO total_days TIMES.
      gs_dates-date = lv_date_s + iv.
      APPEND gs_dates TO gt_dates.
      CLEAR gs_dates.
      iv = iv + 1.
    ENDDO.

*Get PERNR
    CALL FUNCTION 'HR_GETEMPLOYEEDATA_FROMUSER'
      EXPORTING
        username                  = sy-uname
      IMPORTING
        employeenumber            = lv_pernr
      EXCEPTIONS
        user_not_found            = 1
        countrygrouping_not_found = 2
        infty_not_found           = 3.

**Get All Employees
    CALL FUNCTION 'HRWPC_CHECK_FUNCTION_CALL'
      EXPORTING
        viewid  = pv_viewid
      TABLES
        object  = gt_obj_dir
        content = lt_content.

    DELETE  lt_content WHERE  colname NE 'ZORGDESC'.

*Move all pernr into it_pernr
    LOOP AT lt_content INTO ls_content.
      wa_pernr-pernr =  ls_content-realo .
      APPEND wa_pernr TO it_pernr.
      CLEAR wa_pernr.
      CLEAR ls_content.
    ENDLOOP.

*--------------------------------------------------------------------*
*Get all Data
*--------------------------------------------------------------------*

*Get Birthdays, anniversaries...
    CALL FUNCTION 'HRWPC_RD_DATES_GETLIST_INTERNA'
      EXPORTING
        begda          = lv_date_s
        endda          = lv_date_e
        get_bd_list    = 'X'
        get_av_list    = 'X'
        get_mt_list    = 'X'
        log_messages   = 'X'
        refresh_log    = 'X'
      TABLES
        t_pernr        = it_pernr
        t_reminderdate = it_eventsdate.

    DELETE it_eventsdate WHERE eventtype_text = 'Service Anniv.'.
**** Service anniversaries Date Logic

    LOOP AT it_pernr INTO wa_pernr.
*    LOOP AT it_eventsdate INTO  wa_eventsdate WHERE eventtype_text = 'Service Anniv.'.
*      CLEAR l_servicedate.
      CALL FUNCTION 'ZESS_SERVICE_DATE'
        EXPORTING
          pernr        = wa_pernr-pernr
        IMPORTING
          service_date = l_servicedate.

      IF l_servicedate IS NOT INITIAL.
        CALL FUNCTION 'FIMA_DAYS_AND_MONTHS_AND_YEARS'
          EXPORTING
            i_date_from = l_servicedate
            i_date_to   = sy-datum
          IMPORTING
            e_years     = l_years.
        l_servicedate(4) = lv_date_s(4).
        wa_eventsdate-eventdate = l_servicedate.
        wa_eventsdate-pernr = wa_pernr-pernr.
        wa_eventsdate-eventtype_text =  'Service Anniv.'.
        wa_eventsdate-annivyears = l_years.
        APPEND wa_eventsdate TO it_eventsdate .
      ENDIF.
    ENDLOOP.


*Get Reminder Dates
    SELECT * FROM pa0019 INTO TABLE it_reminderdates
      FOR ALL ENTRIES IN it_pernr
      WHERE pernr EQ it_pernr-pernr
      AND mndat BETWEEN lv_date_s AND lv_date_e.

*Get Absense Types
    APPEND LINES OF it_pernr TO ld_im_pernr_tab.

    CALL METHOD cl_pt_arq_reqs_list=>instance_get
      RECEIVING
        result = t.

    CALL METHOD t->sel_reqs_attsabs_for_owner
      EXPORTING
        im_pernr_tab       = ld_im_pernr_tab
        im_status_range    = status_range
        im_selection_begin = lv_date_s
        im_selection_end   = lv_date_e
        im_read_it_data    = 'X'
        im_read_inbox      = 'X'
        im_inbox_pernr     = lv_pernr
*       im_inbox_user      =
        im_read_all_pernr  = 'X'
      IMPORTING
        ex_all_my_reqs     = lt_ex_all_my_reqs.
    SORT lt_ex_all_my_reqs BY first_subm_date .

    LOOP AT lt_ex_all_my_reqs INTO ls_ex_all_my_reqs.
*Check Status sent,withdrawn...
      IF ls_ex_all_my_reqs-version-status EQ 'SENT'.
        t_item_tab = ls_ex_all_my_reqs-version-item_tab.
        LOOP AT t_item_tab INTO w_item_tab.
*       lv = lv + 1.
          READ TABLE w_item_tab-attribs_tab INTO w_attribs_tabs WITH KEY name = 'PERNR'.
          wa_additional_data-pernr = w_attribs_tabs-value.
          CLEAR w_attribs_tabs.
          READ TABLE w_item_tab-attribs_tab INTO w_attribs_tabs WITH KEY name = 'SUBTY'.
          wa_additional_data-subty = w_attribs_tabs-value .
          CLEAR w_attribs_tabs.
          READ TABLE w_item_tab-attribs_tab INTO w_attribs_tabs WITH KEY name = 'BEGDA'.
          wa_additional_data-begda = w_attribs_tabs-value .
          CLEAR w_attribs_tabs.
          READ TABLE w_item_tab-attribs_tab INTO w_attribs_tabs WITH KEY name = 'ENDDA'.
          wa_additional_data-endda = w_attribs_tabs-value .
          CLEAR w_attribs_tabs.
          READ TABLE w_item_tab-attribs_tab INTO w_attribs_tabs WITH KEY name = 'SUBTYPE_DESCRIPTION'.
          wa_additional_data-desc = w_attribs_tabs-value.
          CLEAR w_attribs_tabs.
          READ TABLE w_item_tab-attribs_tab INTO w_attribs_tabs WITH KEY name = 'ATTABS_HOURS'.
          wa_additional_data-attabs_hours = w_attribs_tabs-value.
          APPEND wa_additional_data TO it_additional_data.
          CLEAR wa_additional_data.
        ENDLOOP.
      ENDIF.

*Check absences - POSTED
      IF ls_ex_all_my_reqs-absences IS NOT INITIAL.
        LOOP AT ls_ex_all_my_reqs-absences INTO wa_ex_all_my_reqs1 .
          wa_absences =  wa_ex_all_my_reqs1-p2001.
          APPEND wa_absences TO it_absences.
          CLEAR wa_absences.
        ENDLOOP.
      ENDIF.
    ENDLOOP.

    SORT it_absences BY begda.


* Get Travel Data
    LOOP AT it_pernr INTO wa_pernr.
      t_pernr = wa_pernr-pernr.

      CALL FUNCTION 'TRIPS_LIST_PERIO_HEAD'
        EXPORTING
          employeenumber         = t_pernr
          old_versions           = space
          i_show_trips_from_date = lv_date_s
        TABLES
          perio                  = it_perio
          head                   = it_head
        EXCEPTIONS
          table_perio_read_error = 1
          table_head_read_error  = 2
          tables_inconsistent    = 3
          OTHERS                 = 4.


      REFRESH it_head.
      DELETE it_perio WHERE abrec EQ '3'.
      APPEND LINES OF it_perio TO it_travel.
      REFRESH it_perio.

    ENDLOOP.

*   Get Holidays
    SELECT SINGLE bukrs  FROM pa0001 INTO l_companycode
      WHERE pernr EQ lv_pernr AND
      endda GE sy-datum.

    CASE l_companycode.
      WHEN '1000'.
        l_calendar_id = 'ZT'.
      WHEN '2000'.
        l_calendar_id = 'ZC'.
      WHEN OTHERS.
        l_calendar_id = 'ZT'.
    ENDCASE.

    CALL FUNCTION 'HOLIDAY_GET'
      EXPORTING
        holiday_calendar           = l_calendar_id
        factory_calendar           = l_calendar_id
        date_from                  = lv_date_s
        date_to                    = lv_date_e
      TABLES
        holidays                   = it_holidays
      EXCEPTIONS
        factory_calendar_not_found = 1
        holiday_calendar_not_found = 2
        date_has_invalid_format    = 3
        date_inconsistency         = 4
        OTHERS                     = 5.

    DELETE it_holidays WHERE holiday IS INITIAL.
    DELETE it_holidays WHERE txt_long CS 'Floating'.
    SORT it_holidays BY date.

*-------------------Breaking Dates ABSENCES-------------------------------------------------*

    DATA: t_absences    TYPE STANDARD TABLE OF ty_absences,
          temp_absences LIKE LINE OF t_absences.

    LOOP AT it_absences INTO wa_absences.
      MOVE-CORRESPONDING  wa_absences TO temp_absences.
      IF wa_absences-begda NE wa_absences-endda.
        diff = wa_absences-endda - wa_absences-begda.
        DO diff + 1 TIMES.
          temp_absences-actiondate = wa_absences-begda + lv_n.
          APPEND temp_absences TO t_absences.
*          CLEAR temp_absences.
          lv_n = lv_n + 1.
        ENDDO.
        CLEAR lv_n.
      ELSE.
        temp_absences-actiondate = wa_absences-begda.
        APPEND temp_absences TO t_absences.
        CLEAR temp_absences.
*        MODIFY it_absences FROM wa_absences TRANSPORTING actiondate.
      ENDIF.
    ENDLOOP.
    REFRESH it_absences.
    CLEAR: diff,
           lv_n.

    SORT t_absences BY actiondate.


*-------------------Breaking Dates ADDITIONAL DATA-------------------------------------------------*

    DATA: temp_additional_data LIKE LINE OF it_additional_data,
          t_additional_data    TYPE STANDARD TABLE OF ty_additional_data.

    LOOP AT it_additional_data INTO wa_additional_data.
      IF wa_additional_data-begda NE wa_additional_data-endda.
        diff = wa_additional_data-endda - wa_additional_data-begda.
        DO diff + 1 TIMES.
          MOVE-CORRESPONDING  wa_additional_data TO temp_additional_data.
          temp_additional_data-actiondate = wa_additional_data-begda + lv_n.
          APPEND temp_additional_data TO t_additional_data.
          CLEAR temp_additional_data.
          lv_n = lv_n + 1.
        ENDDO.
        CLEAR lv_n.
      ELSE.
        wa_additional_data-actiondate = wa_additional_data-begda.
        MODIFY it_additional_data FROM wa_additional_data TRANSPORTING actiondate.
      ENDIF.
    ENDLOOP.
    DELETE it_additional_data WHERE actiondate IS INITIAL.
    APPEND LINES OF t_additional_data TO it_additional_data.
    REFRESH t_additional_data.
    CLEAR: diff,
           lv_n.

    SORT it_additional_data BY actiondate.

    SORT it_eventsdate BY eventdate.
    SORT it_timedata BY workdate.
    SORT it_absences BY begda.
    SORT it_travel BY pdatv.
*    sort it_attendance by begda.

    SORT it_reminderdates BY mndat.

*-------------------Breaking Dates TRAVEL-------------------------------------------------*

    DATA: t_travel    TYPE STANDARD TABLE OF ty_travel,
          temp_travel LIKE LINE OF t_travel.
    LOOP AT it_travel INTO wa_travel.
      MOVE-CORRESPONDING  wa_travel TO temp_travel.
      IF wa_travel-pdatv NE wa_travel-pdatb.
        diff = wa_travel-pdatb - wa_travel-pdatv.
        DO diff + 1 TIMES.
*          MOVE-CORRESPONDING  wa_travel TO temp_travel.
          temp_travel-actiondate = wa_travel-pdatv + lv_n.
          APPEND temp_travel TO t_travel.
*          CLEAR temp_travel.
          lv_n = lv_n + 1.
        ENDDO.
        CLEAR lv_n.
      ELSE.
        temp_travel-actiondate = wa_travel-pdatv.
        APPEND temp_travel TO t_travel.
        CLEAR temp_travel.
*        MODIFY it_travel FROM wa_travel TRANSPORTING actiondate.
      ENDIF.
    ENDLOOP.
    REFRESH it_travel.
    CLEAR: diff,
           lv_n.

    SORT t_travel BY actiondate.


    CLEAR:gs_dates,
          wa_pernr.

*--------------------------------------------------------------------*
* Calendar table (it_calendar) - having dates in which records are inserted
* legend(reference) table (it_legend) - table showing icons and its description
* Main table (gt_finaltable) - has all data e.g. type, pernr, details
*--------------------------------------------------------------------*

*Begin of Loop For Each Personnel Number
    LOOP AT it_pernr INTO wa_pernr.
      SELECT SINGLE ename FROM pa0001   " Get Employee Name
         INTO lv_info WHERE pernr EQ wa_pernr
                      AND endda GE sy-datum.

      LOOP AT gt_dates INTO gs_dates. "Loop on every single date of month - to get data from different sources from looped date

* BIRTHDAYS, ANNVERSARIES
        READ TABLE it_eventsdate INTO wa_eventsdate WITH KEY pernr = wa_pernr eventdate = gs_dates-date.
        IF sy-subrc EQ 0.
          gs_finaltable-pernr = wa_pernr-pernr.
          gs_finaltable-ename = lv_info.
          lv_temp_date =  gs_dates-date+4.
          CONDENSE lv_temp_date.
          gs_finaltable-ondate = lv_temp_date.
          CLEAR lv_temp_date.
          gs_finaltable-e_type = 'EVENTS'.

          CALL METHOD me->change_date_format
            EXPORTING
              date1     = gs_dates-date
*             date2     =
            IMPORTING
              out_date1 = gs_finaltable-actual_startdate
*             out_date2 =
            .
*     concatenate gs_finaltable-e_type 'From HRWPC FM' into gs_finaltable-e_type_detail
*                separated by space.

          IF wa_eventsdate-annivyears IS NOT INITIAL.
            SHIFT wa_eventsdate-annivyears LEFT DELETING LEADING '0'.

            CONCATENATE wa_eventsdate-eventtype_text '(' wa_eventsdate-annivyears ')'
                        '-'
                        gs_finaltable-actual_startdate
                  INTO gs_finaltable-e_type_detail
             SEPARATED BY space.
          ELSE.

            CONCATENATE wa_eventsdate-eventtype_text
                        '-'
                        gs_finaltable-actual_startdate
                  INTO gs_finaltable-e_type_detail
             SEPARATED BY space.

          ENDIF.

          CASE wa_eventsdate-eventtype_text.
            WHEN 'Service Anniv.'.
              gs_finaltable-e_type = 'EVENTS'.
              gs_finaltable-icon = 'sap-icon://leads'.
              wa_legend-groupby_i = 'E'.
              wa_legend-icon = 'sap-icon://leads'.
              wa_legend-text = 'Service Anniversary'.
            WHEN 'Date of Birth'.
              gs_finaltable-e_type = 'EVENTS'.
              gs_finaltable-icon = 'sap-icon://unfavorite'.
              wa_legend-groupby_i = 'E'.
              wa_legend-icon = 'sap-icon://unfavorite'.
              wa_legend-text = 'Date of Birth'.
            WHEN OTHERS.
              gs_finaltable-e_type = 'M_TASKS'.
              gs_finaltable-icon = 'sap-icon://status-inactive'.
              wa_legend-groupby_i = 'M'.
              wa_legend-icon = 'sap-icon://status-inactive'.
              wa_legend-text = 'Monitoring Of Tasks'.
          ENDCASE.
          APPEND gs_finaltable TO gt_finaltable.
          CLEAR gs_finaltable.
*Add to Calendar events
          wa_calendar-date = gs_dates-date.
          wa_calendar-type = 'Type10'.
          APPEND wa_calendar TO it_calendar.
          CLEAR wa_calendar.
* Table Legends for events
          APPEND wa_legend TO it_legend.
          CLEAR wa_legend.
        ENDIF.
*--------------------------------------------------------------------*
*REMINDER DATES
        LOOP AT it_reminderdates INTO wa_reminderdates WHERE pernr = wa_pernr-pernr AND mndat = gs_dates-date.
          gs_finaltable-pernr = wa_pernr-pernr.
          gs_finaltable-ename = lv_info.
          gs_finaltable-ondate = wa_reminderdates-mndat+4.
          gs_finaltable-e_type = 'REMINDERS'.

          SELECT SINGLE tmtxt FROM t531s INTO lv_text
            WHERE tmart EQ wa_reminderdates-tmart
            AND sprsl EQ sy-langu.

          CALL METHOD me->change_date_format
            EXPORTING
              date1     = wa_reminderdates-termn
            IMPORTING
              out_date1 = lv_termn.

          CONCATENATE lv_text lv_termn INTO gs_finaltable-e_type_detail
          SEPARATED BY space.

          gs_finaltable-icon = 'sap-icon://message-warning'.
          wa_legend-groupby_i = 'R'.
          wa_legend-icon = 'sap-icon://message-warning'.
          wa_legend-text = 'Reminder'.
          APPEND gs_finaltable TO gt_finaltable.
          CLEAR gs_finaltable.
*  *Add to Calendar for reminder dates
          wa_calendar-date = gs_dates-date.
          wa_calendar-type = 'Type10'.
          APPEND wa_calendar TO it_calendar.
          CLEAR wa_calendar.
*    Table Legend for reminder dates
          APPEND wa_legend TO it_legend.
          CLEAR wa_legend.
        ENDLOOP.

*POSTED LEAVES
        LOOP AT t_absences INTO temp_absences WHERE pernr = wa_pernr-pernr AND actiondate = gs_dates-date.
          gs_finaltable-pernr = wa_pernr-pernr.
          gs_finaltable-ename = lv_info.
          gs_finaltable-ondate = temp_absences-actiondate+4.
          gs_finaltable-e_type = temp_absences-subty.
          lv_hours =  temp_absences-stdaz.

          CONCATENATE lv_hours 'H' INTO lv_hours SEPARATED BY space.
          CONDENSE gs_finaltable-ondate.
          CALL METHOD me->change_date_format
            EXPORTING
              date1     = temp_absences-begda
              date2     = temp_absences-endda
            IMPORTING
              out_date1 = gs_finaltable-actual_startdate
              out_date2 = gs_finaltable-actual_enddate.
          CASE temp_absences-subty.
            WHEN 'VAC'.
              gs_finaltable-icon = 'sap-icon://general-leave-request'.
              wa_legend-icon = 'sap-icon://general-leave-request'.
              wa_legend-text = 'Vacation Leave'.
            WHEN 'FNL'.
              gs_finaltable-icon = 'sap-icon://donut-chart'.
              wa_legend-icon = 'sap-icon://donut-chart'.
              wa_legend-text = 'Funeral'.
            WHEN 'SCK'.
              gs_finaltable-icon = 'sap-icon://accidental-leave'.
              wa_legend-icon = 'sap-icon://accidental-leave'.
              wa_legend-text = 'Sick Leave'.
            WHEN 'CMU'.
              gs_finaltable-icon = 'sap-icon://decision'.
              wa_legend-icon = 'sap-icon://decision'.
              wa_legend-text = 'Compensatory'.
            WHEN 'ADM'.
              gs_finaltable-icon = 'sap-icon://customer'.
              wa_legend-icon = 'sap-icon://customer'.
              wa_legend-text = 'Adminstrative'.
            WHEN 'FLH'.
              gs_finaltable-icon = 'sap-icon://step'.
              wa_legend-icon = 'sap-icon://step'.
              wa_legend-text = 'Floating'.
            WHEN 'BKUS'.
              gs_finaltable-icon = 'sap-icon://suitcase'.
              wa_legend-icon = 'sap-icon://suitcase'.
              wa_legend-text = 'Bank Holiday'.
            WHEN 'MIL'.
              gs_finaltable-icon = 'sap-icon://toaster-top'.
              wa_legend-icon = 'sap-icon://toaster-top'.
              wa_legend-text = 'Miltary Leave'.
            WHEN 'CRLV'.
              gs_finaltable-icon = 'sap-icon://physical-activity'.
              wa_legend-icon = 'sap-icon://physical-activity'.
              wa_legend-text = 'Crisis Leave'.

            WHEN OTHERS.
              gs_finaltable-e_type = ''.
          ENDCASE.
          CONCATENATE gs_finaltable-actual_startdate
                      '-'
                      gs_finaltable-actual_enddate
                      gs_finaltable-e_type
                      lv_hours
                      'POSTED'
                      INTO gs_finaltable-e_type_detail
                      SEPARATED BY space.
          APPEND gs_finaltable TO gt_finaltable.
          CLEAR gs_finaltable.
*  *Add to Calendar posted leaves
          wa_calendar-date = temp_absences-actiondate.
          wa_calendar-type = 'Type10'.
          APPEND wa_calendar TO it_calendar.
          CLEAR wa_calendar.
*    Table Legend for posted leaves
          wa_legend-groupby_i = 'L'.
          APPEND wa_legend TO it_legend.
          CLEAR :wa_legend,
                lv_hours.
*          ENDLOOP.
        ENDLOOP.

*
*ADDITIONAL DATA - REQUESTS WHICH ARE SENT - ABSENSES
        LOOP AT it_additional_data INTO wa_additional_data WHERE pernr = wa_pernr-pernr AND actiondate = gs_dates-date."begda = gs_dates-date.
          gs_finaltable-pernr = wa_pernr-pernr.
          gs_finaltable-ename = lv_info.
          gs_finaltable-ondate = wa_additional_data-actiondate+4. "w_d-dt+4.
          gs_finaltable-e_type = wa_additional_data-subty.
          CONDENSE gs_finaltable-ondate.
          gs_finaltable-actual_startdate = wa_additional_data-actiondate."w_d-dt.
          lv_hours =  wa_additional_data-attabs_hours.

          CONCATENATE lv_hours 'H' INTO lv_hours SEPARATED BY space.

          CALL METHOD me->change_date_format
            EXPORTING
              date1     = wa_additional_data-begda
              date2     = wa_additional_data-endda
            IMPORTING
              out_date1 = gs_finaltable-actual_startdate
              out_date2 = gs_finaltable-actual_enddate.

          CASE wa_additional_data-subty.
            WHEN 'VAC'.
              gs_finaltable-icon = 'sap-icon://general-leave-request'.
              wa_legend-icon = 'sap-icon://general-leave-request'.
              wa_legend-text = 'Vacation Leave'.
            WHEN 'FNL'.
              gs_finaltable-icon = 'sap-icon://donut-chart'.
              wa_legend-icon = 'sap-icon://donut-chart'.
              wa_legend-text = 'Funeral'.
            WHEN 'SCK'.
              gs_finaltable-icon = 'sap-icon://accidental-leave'.
              wa_legend-icon = 'sap-icon://accidental-leave'.
              wa_legend-text = 'Sick Leave'.
            WHEN 'CMU'.
              gs_finaltable-icon = 'sap-icon://decision'.
              wa_legend-icon = 'sap-icon://decision'.
              wa_legend-text = 'Compensatory'.
            WHEN 'ADM'.
              gs_finaltable-icon = 'sap-icon://customer'.
              wa_legend-icon = 'sap-icon://customer'.
              wa_legend-text = 'Adminstrative'.
            WHEN 'FLH'.
              gs_finaltable-icon = 'sap-icon://step'.
              wa_legend-icon = 'sap-icon://step'.
              wa_legend-text = 'Floating'.
            WHEN 'BKUS'.
              gs_finaltable-icon = 'sap-icon://suitcase'.
              wa_legend-icon = 'sap-icon://suitcase'.
              wa_legend-text = 'Bank Holiday'.
            WHEN 'MIL'.
              gs_finaltable-icon = 'sap-icon://toaster-top'.
              wa_legend-icon = 'sap-icon://toaster-top'.
              wa_legend-text = 'Miltary Leave'.
            WHEN 'CRLV'.
              gs_finaltable-icon = 'sap-icon://physical-activity'.
              wa_legend-icon = 'sap-icon://physical-activity'.
              wa_legend-text = 'Crisis Leave'.

            WHEN OTHERS.
              gs_finaltable-e_type = ''.

          ENDCASE.

          CONCATENATE gs_finaltable-actual_startdate
                      gs_finaltable-actual_enddate
                      wa_additional_data-desc
                      lv_hours
                      'SENT'
                      INTO gs_finaltable-e_type_detail
                      SEPARATED BY space.

          APPEND gs_finaltable TO gt_finaltable.
          CLEAR gs_finaltable.
* Add to Calendar for sent leaves..
          wa_calendar-date = wa_additional_data-actiondate. "w_d-dt.
          wa_calendar-type = 'Type10'.
          APPEND wa_calendar TO it_calendar.
          CLEAR wa_calendar.
*    Table Legends for sent leaves
          wa_legend-groupby_i = 'L'.
          APPEND wa_legend TO it_legend.
          CLEAR wa_legend.
*          ENDLOOP.
        ENDLOOP.


*TRAVEL
        LOOP AT t_travel INTO temp_travel WHERE pernr = wa_pernr-pernr AND actiondate = gs_dates-date.

          gs_finaltable-pernr = wa_pernr-pernr.
          gs_finaltable-ename = lv_info.
          gs_finaltable-ondate = temp_travel-actiondate+4.
          CONDENSE gs_finaltable-ondate.

          CALL METHOD me->change_date_format
            EXPORTING
              date1     = temp_travel-pdatv
              date2     = temp_travel-pdatb
            IMPORTING
              out_date1 = gs_finaltable-actual_startdate
              out_date2 = gs_finaltable-actual_enddate.
          gs_finaltable-icon = 'sap-icon://travel-itinerary'.
          gs_finaltable-e_type = 'TRAVEL'.

*   Get Travel reason
          SELECT SINGLE kunde FROM ptrv_head INTO lv_kunde
            WHERE pernr EQ wa_pernr-pernr
             AND reinr EQ temp_travel-reinr.

          IF lv_kunde IS INITIAL.
            lv_kunde = 'NO REASON PROVIDED FOR THIS TRIP'.
          ENDIF.

          CONCATENATE gs_finaltable-actual_startdate
                      '-'
                      gs_finaltable-actual_enddate
                      lv_kunde
                      INTO
                      gs_finaltable-e_type_detail
                      SEPARATED BY space.

*          gs_finaltable-e_type_detail = lv_kunde.

          wa_legend-groupby_i = 'T'.
          wa_legend-icon = 'sap-icon://travel-itinerary'.
          wa_legend-text = 'Travel'.

          APPEND gs_finaltable TO gt_finaltable.
          CLEAR gs_finaltable.
*  Add to calendar
          wa_calendar-date = temp_travel-actiondate.
          wa_calendar-type = 'Type10'.
          APPEND wa_calendar TO it_calendar.
          CLEAR wa_calendar.
*   Table Legend
          APPEND wa_legend TO it_legend.
          CLEAR wa_legend.
*          ENDLOOP. "t_d loop ends
        ENDLOOP." it_travel loop ends


      ENDLOOP. " gt_dates loop ends
    ENDLOOP." it_pernr loop ends

* ADD HOLIDAYS TO CALENDAR AND FINAL TABLE
    LOOP AT it_holidays INTO wa_holidays.
      gs_finaltable-ename = wa_holidays-txt_long.
      gs_finaltable-ondate = wa_holidays-date+4.
      gs_finaltable-e_type = 'HOLIDAY'.
      gs_finaltable-icon = 'sap-icon://globe'.
      gs_finaltable-e_type_detail = wa_holidays-txt_long.
      APPEND gs_finaltable TO gt_finaltable.
      CLEAR gs_finaltable.

      wa_calendar-date = wa_holidays-date.
      wa_calendar-type = 'Type07'.
      APPEND wa_calendar TO it_calendar.
      CLEAR wa_calendar.
*      Add holidays to Legend's table
      wa_legend-groupby_i = 'H'.
      wa_legend-icon = 'sap-icon://globe'.
      wa_legend-text = wa_holidays-txt_long.
      APPEND wa_legend TO it_legend.
      CLEAR wa_legend.
    ENDLOOP.

*Changing calendar backgroud color (type) for holidays
    LOOP AT it_calendar INTO wa_calendar.   "NEW UPDATE
      READ TABLE it_holidays INTO wa_holidays WITH KEY date = wa_calendar-date.
      IF sy-subrc EQ 0.
        wa_calendar-type = 'Type07'.
        MODIFY it_calendar FROM wa_calendar TRANSPORTING type.
      ENDIF.
    ENDLOOP.


    SORT it_legend BY text.
    DELETE it_legend WHERE text EQ space.
    DELETE ADJACENT DUPLICATES FROM it_legend COMPARING text.
    SORT it_legend BY groupby_i.

    SORT gt_finaltable BY actual_startdate.
  ENDMETHOD.

*  attendances
*read table it_attendance into wa_attendance with key pernr = wa_pernr-pernr begda = gs_dates-date.
*if sy-subrc eq 0.
*   gs_finaltable-pernr = wa_pernr-pernr.
*   gs_finaltable-ename = lv_info.
*   lv_temp_date =  gs_dates-date+6.
*   condense lv_temp_date.
*   gs_finaltable-ondate = lv_temp_date.
*   clear lv_temp_date.
*   gs_finaltable-icon = 'sap-icon://time-entry-request'.
*   gs_finaltable-e_type = 'ATT'.
**   gs_finaltable-e_type_detail = 'From PA2002'.
*
*   call method me->change_date_format
*     exporting
*       date1     = wa_attendance-begda
**       date2     =
*     importing
*       out_date1 = gs_finaltable-actual_startdate
*.
*   concatenate 'POSTED'
*              wa_attendance-subty
*              'ON'
*              gs_finaltable-actual_startdate
*              into gs_finaltable-e_type_detail separated by space.
*
**   aDD TO calendar
*    wa_calendar-date = gs_dates-date.
*    wa_calendar-type = 'Type10'.
*    append wa_calendar to it_calendar.
*    clear wa_calendar.
*    append gs_finaltable to gt_finaltable.
*    clear gs_finaltable.
*
*endif.
*--------------------------------------------------------------------*


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_MSS_CALENDAR->TABLE_LEGEND
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD table_legend.


*   wa_legend-groupby = 'A'.
*   wa_legend-icon = 'sap-icon://time-entry-request'.
*   wa_legend-text = 'Attendances'.
*   append wa_legend to it_legend.
*   clear wa_legend.


    wa_legend-icon = 'sap-icon://leads'.
    wa_legend-text = 'Service Anniversary'.
    APPEND wa_legend TO it_legend.
    CLEAR wa_legend.

    wa_legend-icon = 'sap-icon://unfavorite'.
    wa_legend-text = 'Date of Birth'.
    APPEND wa_legend TO it_legend.
    CLEAR wa_legend.

    wa_legend-icon = 'sap-icon://accidental-leave'.
    wa_legend-text = 'Sick Leave'.
    APPEND wa_legend TO it_legend.
    CLEAR wa_legend.

    wa_legend-icon = 'sap-icon://general-leave-request'.
    wa_legend-text = 'Vacation Leave'.
    APPEND wa_legend TO it_legend.
    CLEAR wa_legend.

    wa_legend-icon = 'sap-icon://donut-chart'.
    wa_legend-text = 'Funeral'.
    APPEND wa_legend TO it_legend.
    CLEAR wa_legend.

    wa_legend-icon = 'sap-icon://travel-itinerary'.
    wa_legend-text = 'Travel'.
    APPEND wa_legend TO it_legend.
    CLEAR wa_legend.

    wa_legend-icon = 'sap-icon://message-warning'.
    wa_legend-text = 'Reminder Date'.
    APPEND wa_legend TO it_legend.
    CLEAR wa_legend.

*   wa_legend-icon = 'sap-icon://status-inactive'.
*   wa_legend-text = 'Floating Holiday'.
*   append wa_legend to it_legend.
*   clear wa_legend.

    wa_legend-icon = 'sap-icon://clinical-order'.
    wa_legend-text = 'Compensatory'.
    APPEND wa_legend TO it_legend.
    CLEAR wa_legend.

    wa_legend-icon = 'sap-icon://unpaid-leave'.
    wa_legend-text = 'Funding Expires'.
    APPEND wa_legend TO it_legend.
    CLEAR wa_legend.


*   Months for the combo box
    wa_month-name = 'January'.
    APPEND wa_month TO it_month.
    CLEAR wa_month.
    wa_month-name = 'February'.
    APPEND wa_month TO it_month.
    CLEAR wa_month.
    wa_month-name = 'March'.
    APPEND wa_month TO it_month.
    CLEAR wa_month.
    wa_month-name = 'April'.
    APPEND wa_month TO it_month.
    CLEAR wa_month.
    wa_month-name = 'May'.
    APPEND wa_month TO it_month.
    CLEAR wa_month.
    wa_month-name = 'June'.
    APPEND wa_month TO it_month.
    CLEAR wa_month.
    wa_month-name = 'July'.
    APPEND wa_month TO it_month.
    CLEAR wa_month.
    wa_month-name = 'August'.
    APPEND wa_month TO it_month.
    CLEAR wa_month.
    wa_month-name = 'September'.
    APPEND wa_month TO it_month.
    CLEAR wa_month.
    wa_month-name = 'October'.
    APPEND wa_month TO it_month.
    CLEAR wa_month.
    wa_month-name = 'November'.
    APPEND wa_month TO it_month.
    CLEAR wa_month.
    wa_month-name = 'December'.
    APPEND wa_month TO it_month.
    CLEAR wa_month.
  ENDMETHOD.
ENDCLASS.