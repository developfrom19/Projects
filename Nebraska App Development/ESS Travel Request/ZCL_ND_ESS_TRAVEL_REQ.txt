CLASS zcl_nd_ess_travel_req DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
    INTERFACES /neptune/if_nad_server .
    TYPES:
      BEGIN OF ty_travel_list,
        reinr          TYPE reinr,
        datearr        TYPE reend,
        timearr        TYPE reenu,
        country        TYPE lndgr,
        countrytxt     TYPE string,
        trip_total     TYPE ptrv_shdr-sum_reimbu,
        pay_curr       TYPE ptrv_shdr-currency,
        datedep        TYPE rebed,
        timedep        TYPE rebeu,
        location       TYPE rzielort,
        country_grp    TYPE molga,
        tp_variant     TYPE morei,
        status         TYPE string,
        status_txt     TYPE string,
        status_txt1    TYPE string,
        appvl_status   TYPE antrg,
        settl_status   TYPE abrec,
        perio          TYPE ptrv_perod,  "Trip period
        pdvrs          TYPE ptrv_pdvrs,   "Trip version
        t_schema       TYPE rsche,
        schem_txt      TYPE string,
        update_icon    TYPE string,
        update_color   TYPE string,
        pernr          TYPE pa0001-pernr,
        ename          TYPE pa0001-ename,
        approvername   TYPE string,
        request        TYPE ptrv_objekt,
        expenses       TYPE ptrv_objekt,
        estimated_cost TYPE ptrv_estimated_cost,
        filter         TYPE string,
        activity_txt   TYPE t706r-tktxt,
*        att_create_auth(1)   TYPE c,
*        att_display_auth(1)  TYPE c,
*        att_change_auth(1)   TYPE c,
*        att_delete_auth(1)   TYPE c,
        email(40)      TYPE c,
        user_name      TYPE sy-uname,
*        display_only_role(1) TYPE c,
        t_actype       TYPE kztkt,
*        pernr          TYPE pernr_d,
      END OF ty_travel_list .
    TYPES:
      BEGIN OF ty_travel_head,
        reinr          TYPE reinr,
        select_meals   TYPE string,
        select_acc     TYPE string,
        editor         TYPE string,
        update         TYPE string,
        update_icon    TYPE string,
        update_color   TYPE string,
        trip_total     TYPE ptrv_shdr-sum_reimbu,
        pay_curr       TYPE ptrv_shdr-currency,
        appvl_status   TYPE antrg,
        settl_status   TYPE abrec,
        status         TYPE string,
        status_txt     TYPE string,
        status_txt1    TYPE string,
        schem_txt      TYPE string,
        t_schema       TYPE rsche,
        tp_variant     TYPE string,
        html           TYPE string,
*        html           TYPE formhtml,
        datedep        TYPE rebed,
        timedep        TYPE rebeu,
        datearr        TYPE reend,
        timearr        TYPE reenu,
        customer       TYPE rkunde,
        location       TYPE rzielort,
        country        TYPE lndgr,
        countrytxt     TYPE text_rgion,
        region         TYPE hrgio,
        out_date       TYPE datgh,
        out_time       TYPE uhrgh,
        ret_date       TYPE datgz,
        ret_time       TYPE uhrgz,
        ret_coun       TYPE ret_coun,
        ret_rgio       TYPE ret_rgio,
        ret_ttcs       TYPE ret_ttcs,
*        t_schema      TYPE rsche,
        tt_comsp       TYPE berei,
        tt_statu       TYPE kzrea,
        t_actype       TYPE kztkt,
        pd_meals       TYPE verpa,
        pd_accom       TYPE uepkz,
        no_night       TYPE anuep,
        pstlz          TYPE pstlz,
        ort01          TYPE pad_ort01,
        stras          TYPE pad_stras,
        state          TYPE regio,
        request        TYPE ptrv_objekt,
        travel_plan    TYPE ptrv_objekt,
        expenses       TYPE ptrv_objekt,
        ort02          TYPE pad_ort02,
        city_code      TYPE ad_citynum,
        tax_per_diem   TYPE ptrv_tax_per_diem_core,
        tax_pd_man     TYPE ptrv_tax_pd_man_core,
        tax_ov_man     TYPE ptrv_tax_ov_man_core,
        exchange_date  TYPE ptrv_dattn_core,
        rounding       TYPE ptrv_rounding_core,
        filter         TYPE string,
        int_order      TYPE aufnr,
        approvername   TYPE string,
        miles          TYPE kmges,
        perio          TYPE ptrv_perod,  "Trip period
        pdvrs          TYPE ptrv_pdvrs,   "Trip version
*        molga         TYPE molga,
        country_grp    TYPE molga,
        user_defined   TYPE zzuserdefc,   "User Defined
        estimated_cost TYPE ptrv_estimated_cost,
        pernr          TYPE pernr_d,
*        att_create_auth(1)   TYPE c,
*        att_display_auth(1)  TYPE c,
*        att_change_auth(1)   TYPE c,
*        att_delete_auth(1)   TYPE c,
        user_name      TYPE sy-uname,
*        display_only_role(1) TYPE c,
      END OF ty_travel_head .

    TYPES: BEGIN OF ty_parameters,
             pernr                TYPE pernr_d,
             att_create_auth(1)   TYPE c,
             att_display_auth(1)  TYPE c,
             att_change_auth(1)   TYPE c,
             att_delete_auth(1)   TYPE c,
             display_only_role(1) TYPE c,
             approvername         TYPE pa0001-ename,
             comp_code            TYPE bukrs,
           END OF ty_parameters.

    DATA: gv_parameters TYPE ty_parameters.
    TYPES:
      BEGIN OF ty_stopover,
        reinr         TYPE reinr,
        key           TYPE string,
        new_record(1) TYPE c,
        act_text      TYPE string.
            INCLUDE TYPE ptrv_web_itinerary_ext.
    TYPES: END OF ty_stopover .
    TYPES:
      BEGIN OF ty_cost,
        reinr         TYPE reinr,
        cost_text     TYPE string,
        new_record(1) TYPE c.
            INCLUDE TYPE ptrv_web_costdist_ext.
    TYPES: END OF ty_cost .
    TYPES:
      BEGIN OF ty_cost_expense,
        reinr         TYPE reinr,
        new_record(1) TYPE c,
        field_state_a TYPE boolean,
        field_state_p TYPE boolean.
            INCLUDE TYPE ptrv_web_costdist_rece_ext.
    TYPES: END OF ty_cost_expense .
    TYPES:
      BEGIN OF ty_receipt,
        reinr         TYPE reinr,
        key           TYPE string,
        image         TYPE string,
        image_source  TYPE string,
        receiptno     TYPE nrbel,
        ded_flag      TYPE belaz,
        paid_com      TYPE bezfa,
        exp_type      TYPE spkzl,
        exp_text      TYPE text_spkzl,
        rec_amount    TYPE rec_amount,
        rec_curr      TYPE waers,
        rec_rate      TYPE ukursp,
        loc_amount    TYPE loc_amount,
        loc_curr      TYPE waers,
        tax_code      TYPE mwskz,
        rec_date      TYPE beldt,
        shorttxt      TYPE txbel,
        key_stop      TYPE keyzi,
        share_perc    TYPE betpr,
        rec_rate_cm   TYPE ukursm,
        paper_receipt TYPE paper_receipt_core,
        receipt_ok    TYPE receipt_validated_core,
        rec_refnr     TYPE rec_nobel,
        protect       TYPE protect,
      END OF ty_receipt .
    TYPES:
      BEGIN OF ty_addinfo,
        reinr        TYPE reinr,
        key          TYPE string,
        receiptno    TYPE nrbel,
        no_brft      TYPE franz,
        country      TYPE lndgr,
        region       TYPE rgion,
        tt_comsp     TYPE berei,
        from_date    TYPE frdat,
        to_date      TYPE todat,
        multipli     TYPE eranz,
        descript     TYPE erdes,
        location     TYPE erplc,
        bus_purpo    TYPE buspu,
        bus_reason   TYPE busre,
        ccomp        TYPE ccomp,
        c_doc        TYPE c_doc,
        c_txt        TYPE c_txt,
        p_ctg        TYPE provider_category,
        p_prv        TYPE provider_code,
        p_doc        TYPE p_doc,
        n_stf        TYPE ch_no_staff,
        n_ptn        TYPE ch_no_partners,
        n_gst        TYPE ch_no_guests,
        guid_ccc     TYPE guid_32,
        cfirma       TYPE bezfa,
        anzlu        TYPE luanz,
        anzdi        TYPE dianz,
        booked_price TYPE bapicurr_d,
        booked_curr  TYPE ptrv_booked_curr,
        diff_amount  TYPE bapicurr_d,
        diff_curr    TYPE ptrv_diff_curr,
        reason       TYPE ptrv_reason_l4h,
        stceg        TYPE stceg,
        stcd1        TYPE stcd1,
        name         TYPE ad_name1,
        street       TYPE ad_street,
        house_num    TYPE ad_hsnm1,
        post_code    TYPE ad_pstcd1,
        city         TYPE ad_city1,
      END OF ty_addinfo .
    TYPES:
      BEGIN OF ty_schema_exp,
        schem TYPE schem,
        spkzl TYPE spkzl,
        sptxt TYPE string,
      END OF ty_schema_exp .
    TYPES:
      BEGIN OF ty_states,
        bland     TYPE t005s-bland,
        bezei     TYPE t005u-bezei,
        state_txt TYPE string,
      END OF ty_states .
    TYPES:
      BEGIN OF ty_providers,
        category TYPE ta21p-category,
        provider TYPE ta21p-provider,
        name     TYPE ta21p-name,
        p_text   TYPE string,
      END OF ty_providers .
    TYPES:
      BEGIN OF ty_expenses,
        reinr            TYPE reinr,
        providecate_text TYPE string,
        providecode_text TYPE string,
        new_record(1)    TYPE c.
            INCLUDE TYPE ptrv_web_receipts_int_2.
    TYPES: END OF ty_expenses .
    TYPES:
      BEGIN OF ty_deduction,
        reinr          TYPE reinr,
        break_selected TYPE string,
        lunch_selected TYPE string,
        dinne_selected TYPE string,
        night_selected TYPE string,
        ded_date       TYPE abzda,
        break_de       TYPE fkenn,
        lunch_de       TYPE mkenn,
        dinne_de       TYPE akenn,
        lu_coupn       TYPE ekenn,
        night_de       TYPE uebern,
        brft_time      TYPE ded_time,
        lnch_time      TYPE ded_time,
        dinn_time      TYPE ded_time,
      END OF ty_deduction .
    TYPES:
      BEGIN OF ty_save_options,
        select_draft    TYPE string,
        select_approved TYPE string,
      END OF ty_save_options .
    TYPES:
      BEGIN OF ty_status,
        mss_text TYPE string.
            INCLUDE TYPE bapiret2.
    TYPES: END OF ty_status .
    TYPES:
      BEGIN OF ty_empinfo,
        approvername TYPE string.
            INCLUDE TYPE bapitrvemp.
    TYPES: END OF ty_empinfo .
    TYPES:    BEGIN OF ty_attachment,
                reinr      TYPE reinr,
                instid_a   TYPE sibfboriid,
                instid_b   TYPE sibfboriid,
                typeid_a   TYPE string,
                crdat      TYPE sy-datum,
                "crdat      TYPE so_dat_cr,
                crtim      TYPE so_tim_cr,
                docdes     TYPE so_obj_des,
                file_ext   TYPE file_ext,
                content    TYPE string,
                file_size  TYPE string,
                creator_id TYPE so_crea_id,
                owner_nam  TYPE so_own_nam,
              END OF ty_attachment .
    TYPES: BEGIN OF ty_e_types,
             field_from       TYPE boolean,  "Visiible or hidden
             field_to         TYPE boolean,
             field_desc       TYPE boolean,
             field_cat        TYPE boolean,
             optional_from(3) TYPE c,  " Mandatory or not
             optional_to(3)   TYPE c,
             optional_desc(3) TYPE c,
             optional_cat(3)  TYPE c,
             provider_cat     TYPE t706b1-p_ctg.
            INCLUDE     TYPE ztrip_exptypes_v.
    TYPES: END OF ty_e_types .
    TYPES:   BEGIN OF ty_cost_assignments,
               kokrs          TYPE csks-kokrs,
               kostl          TYPE csks-kostl,
               bukrs          TYPE csks-bukrs,
               bkzer          TYPE csks-bkzer,
               ktext          TYPE cskt-ktext,
               datbi          TYPE csks-datbi,
               gsber          TYPE csks-gsber,
               n_entries(5)   TYPE n,
               filter         TYPE string,
               lock_indicator TYPE boolean,
             END OF ty_cost_assignments .

    TYPES: BEGIN OF ty_cost_assignments_wbs,
             pspnr          TYPE prps-pspnr,
             posid          TYPE prps-posid,
             post1          TYPE prps-post1,
             psphi          TYPE prps-psphi,
             vernr          TYPE prps-vernr,
             verna          TYPE prps-verna,
             pbukr          TYPE prps-pbukr,
             n_entries(5)   TYPE n,
             filter         TYPE string,
             lock_indicator TYPE boolean,
           END OF ty_cost_assignments_wbs .
    TYPES:
      BEGIN OF ty_ref_create,
        pernr    TYPE pa0001-pernr,
        reinr    TYPE reinr,
        datearr  TYPE sy-datum,
        location TYPE erplc,
      END OF ty_ref_create .


    TYPES: BEGIN OF ty_default_cost,
             comp_code       TYPE bukrs,
             costcenter      TYPE kostl,
             bus_area        TYPE gsber,
             costdistno      TYPE costdistno,
             new_record      TYPE string,
             perc_share      TYPE perc_share,
             reinr           TYPE reinr,
             costcenter_name TYPE ktext,
           END OF ty_default_cost.

    TYPES: BEGIN OF ty_status_report,
             pernr              TYPE ptrv_head-pernr,
             name               TYPE p0002-cname,
             reinr              TYPE ptrv_head-reinr,
             begda              TYPE sy-datum,
             endda              TYPE sy-datum,
             agent              TYPE swwwihead-wi_aagent,
             agentname          TYPE p0002-cname,
             statuscode         TYPE zwf_travel_status_code,
             statustext         TYPE dd07t-ddtext,
             actiondate         TYPE sy-datum,
             actiontime         TYPE sy-uzeit,
             reason             TYPE ptrv_head-kunde,
             comments           TYPE string,
             comment_visibility TYPE boolean,
             text_visibility    TYPE boolean, "This is only applied for 'NEXT STEP' term which comes under comments column
*         comment_icon(4) type c,
             color_line         TYPE string,
           END OF ty_status_report.

    TYPES:BEGIN OF ty_cancel_reason,
            cancel_reason TYPE string,
          END OF ty_cancel_reason.

    TYPES:  BEGIN OF ty_travel_links,
              col1_urlink      TYPE string,
              col1_urlink_text TYPE string,
              col2_urlink      TYPE string,
              col2_urlink_text TYPE string,
              col3_urlink      TYPE string,
              col3_urlink_text TYPE string,
            END OF ty_travel_links.

    DATA: gv_cancel_reason TYPE ty_cancel_reason.

    DATA: it_status_report TYPE STANDARD TABLE OF ty_status_report,
          wa_status_report TYPE ty_status_report.

    DATA: it_default_cost TYPE STANDARD TABLE OF ty_default_cost,
          wa_default_cost TYPE ty_default_cost.
    DATA: search_cost_assignments     TYPE ty_cost_assignments,
          search_cost_assignments_wbs TYPE ty_cost_assignments_wbs.
    DATA:
      it_attachment TYPE STANDARD TABLE OF ty_attachment .
    DATA wa_attachment TYPE ty_attachment .
    DATA: it_cost_assignments     TYPE STANDARD TABLE OF ty_cost_assignments,
          it_cost_assignments_wbs TYPE STANDARD TABLE OF ty_cost_assignments_wbs.
    DATA:
      it_travel_head TYPE STANDARD TABLE OF ty_travel_head .
    DATA wa_travel_head TYPE ty_travel_head .
*    DATA:
*      it_mileage TYPE STANDARD TABLE OF ty_mileage .
*    DATA wa_mileage TYPE ty_mileage .
    DATA:
      it_text TYPE STANDARD TABLE OF bapitrtext .
    DATA:
      it_stopover   TYPE STANDARD TABLE OF ty_stopover .
    DATA wa_stopover TYPE ty_stopover .
    DATA:
      it_stopover_i TYPE STANDARD TABLE OF ty_stopover .
    DATA wa_stopover_i TYPE ty_stopover .
    DATA:
      it_cost TYPE STANDARD TABLE OF ty_cost .
    DATA wa_cost TYPE ty_cost .
*    DATA:
*      it_cost_mileage TYPE STANDARD TABLE OF ty_cost_mileage .
*    DATA wa_cost_mileage TYPE ty_cost_mileage .
    DATA:
      it_cost_expense TYPE STANDARD TABLE OF ty_cost_expense .
    DATA wa_cost_expense TYPE ty_cost_expense .
    DATA:
      it_activities TYPE STANDARD TABLE OF bapitr706r .
    DATA:
      it_statuatory TYPE STANDARD TABLE OF bapitr706g .
    DATA:
      it_emp_info TYPE STANDARD TABLE OF bapitrvemp .
    DATA wa_emp_info TYPE bapitrvemp .
    DATA:
      it_empinfo  TYPE STANDARD TABLE OF ty_empinfo .
    DATA wa_empinfo TYPE ty_empinfo .
    DATA:
      it_trip_schema TYPE STANDARD TABLE OF bapitr706s .
    DATA:
      it_vehicle_types TYPE STANDARD TABLE OF bapitr706e .
    DATA wa_vehicle_types TYPE bapitr706e .
    DATA:
      it_expense_schema TYPE STANDARD TABLE OF ty_schema_exp .
    DATA:
      it_expense_types TYPE STANDARD TABLE OF bapitr706b .
    DATA:
      it_e_types TYPE STANDARD TABLE OF ty_e_types .
    DATA wa_e_types TYPE ty_e_types .
    DATA:
      it_defaults TYPE STANDARD TABLE OF bapitrvdef .
    DATA:
      it_currencies TYPE STANDARD TABLE OF bapitrcurr .
    DATA:
      it_countries TYPE STANDARD TABLE OF bapitr706o .
    DATA wa_countries TYPE bapitr706o .
    DATA:
      it_states TYPE STANDARD TABLE OF ty_states .
    DATA wa_states TYPE ty_states .
    DATA:
      it_receipts TYPE STANDARD TABLE OF ty_receipt .
    DATA wa_receipts TYPE ty_receipt .
    DATA wa_addinfo TYPE ty_addinfo .
    DATA gv_pernr TYPE pernr_d .
    DATA:
      it_addinfo TYPE STANDARD TABLE OF ty_addinfo .
    DATA lv_approver_pernr TYPE pa0001-pernr .
    DATA lv_approver_name TYPE pa0001-ename .
    DATA:
      it_providers TYPE STANDARD TABLE OF ty_providers .
    DATA wa_providers TYPE ty_providers .
    DATA:
      it_expenses TYPE STANDARD TABLE OF ty_expenses .
    DATA wa_expenses TYPE ty_expenses .
    DATA:
      it_return TYPE STANDARD TABLE OF bapiret2 .
    DATA wa_return TYPE bapiret2 .
    DATA:
      it_status TYPE STANDARD TABLE OF ty_status .
    DATA wa_status TYPE ty_status .
    DATA:
*data: it_status
*      ty_messages1,
*           wa_status LIKE LINE OF it_status.
      it_save_options TYPE STANDARD TABLE OF ty_save_options .
    DATA wa_save_options TYPE ty_save_options .
    DATA:
      it_travel_head_out TYPE STANDARD TABLE OF ty_travel_head .
    DATA:
      it_cost_ae         TYPE STANDARD TABLE OF ptrv_web_costdist_trip_ext .
    DATA:
*          it_mileage_ae     TYPE STANDARD TABLE OF ty_mileage,
      it_mileage_ae      TYPE STANDARD TABLE OF ptrv_web_mileage_ext .
    DATA wa_mileage_ae TYPE ptrv_web_mileage_ext .
    DATA:
      it_receipts_out    TYPE STANDARD TABLE OF ty_receipt .
    DATA:
      it_addinfo_out     TYPE STANDARD TABLE OF ty_addinfo .
    DATA:
      it_stopover_ae     TYPE STANDARD TABLE OF ptrv_web_itinerary_ext .
    DATA:
      wa_stopover_ae     LIKE LINE OF it_stopover_ae .
    DATA:
      it_deduction_out   TYPE STANDARD TABLE OF ty_deduction .
    DATA:
      it_expenses_ae     TYPE STANDARD TABLE OF ptrv_web_receipts_ext_2 .
    DATA:
      it_cost_mileage_ae TYPE STANDARD TABLE OF ptrv_web_costdist_mile_ext .
    DATA wa_cost_mileage_ae TYPE ptrv_web_costdist_mile_ext .
    DATA:
      it_cost_expense_ae TYPE STANDARD TABLE OF ptrv_web_costdist_rece_ext .
    DATA wa_cost_expense_ae TYPE ptrv_web_costdist_rece_ext .
    DATA:
*    Delete Structures
      it_mileage_delete  TYPE STANDARD TABLE OF ptrv_web_mileage_int .
    DATA:
      it_expense_delete  TYPE STANDARD TABLE OF ptrv_web_receipts_int .
    DATA:
      it_stopover_delete TYPE STANDARD TABLE OF ptrv_web_itinerary_int .
    DATA:
      it_costassi_delete TYPE STANDARD TABLE OF ptrv_web_costdist_int .
    DATA:
      it_cost_mileage_delete TYPE STANDARD TABLE OF ptrv_web_costdist_mile_int .
    DATA:
      it_cost_expense_delete TYPE STANDARD TABLE OF ptrv_web_costdist_rece_int .
    DATA wa_ref_create TYPE ty_ref_create .
    DATA lv_reinr TYPE string .
    DATA:
      it_travel_list TYPE STANDARD TABLE OF ty_travel_list .
    DATA:  it_all_trips   TYPE STANDARD TABLE OF ptp42.
    DATA: lt_ziel TYPE STANDARD TABLE OF ptrv_util_ziel,
          w_ziel  TYPE ptrv_util_ziel.
    DATA:  it_travel_links     TYPE STANDARD TABLE OF ty_travel_links.
    DATA: it_message_attachments TYPE STANDARD TABLE OF bapiret2.
  PROTECTED SECTION.
private section.

  data WA_COST_AE type PTRV_WEB_COSTDIST_TRIP_INT .
  data WA_EXPENSES_AE type PTRV_WEB_RECEIPTS_EXT_2 .
  data IT_FIELD_GENERAL type BAPITRVFSEL_ITAB .

  methods GET_EMPLOYEE_NUMBER .
  methods USER_PARAMETERS .
  methods DEFAULT_COST_ASSIGNMENT
    importing
      !GV_PERNR type PERNR_D .
  methods VALIDATE_COST_ASSIGN
    importing
      !SERVER type ref to /NEPTUNE/CL_NAD_SERVER .
  methods GET_COST_ASSIGNMENTS .
  methods GET_WBS_ELEMENTS .
  methods GET_TRAVEL_SETUP .
  methods GET_TRAVEL_LIST .
  methods ON_SELECT_LISTITEM
    importing
      !AJAX_VALUE type STRING .
  methods GET_ATTACHMENTS
    importing
      !LV_INSTID_A type SRGBTBREL-INSTID_A
      !LV_REINR type REINR
      !SERVER type ref to /NEPTUNE/CL_NAD_SERVER optional .
  methods GET_STATUS_REPORT .
  methods PERFORM_ENQUEUE
    importing
      !AJAX_VALUE type STRING .
  methods PERFORM_DEQUEUE
    importing
      value(L_REINR) type REINR optional
      value(L_PERNR) type PERNR_D optional .
  methods SAVE_ATTACHMENTS .
  methods GET_TRAVEL_PDF
    importing
      !L_PERNR type PERNR_D optional
      !L_REINR type REINR optional .
  methods SAVE_TRAVEL .
  methods SAVE_TRAVEL_CREATE .
  methods CANCEL_TRIP .
  methods GET_TILE_INFO
    importing
      !SERVER type ref to /NEPTUNE/CL_NAD_SERVER .
ENDCLASS.



CLASS ZCL_ND_ESS_TRAVEL_REQ IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_ND_ESS_TRAVEL_REQ->/NEPTUNE/IF_NAD_SERVER~HANDLE_ON_AJAX
* +-------------------------------------------------------------------------------------------------+
* | [--->] APPLID                         TYPE        STRING
* | [--->] AJAX_ID                        TYPE        STRING
* | [--->] AJAX_VALUE                     TYPE        STRING
* | [--->] SERVER                         TYPE REF TO /NEPTUNE/CL_NAD_SERVER
* | [--->] REQUEST                        TYPE        /NEPTUNE/DATA_REQUEST
* | [<-->] NAVIGATION                     TYPE        /NEPTUNE/AJAX_NAVIGATION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD /neptune/if_nad_server~handle_on_ajax.
    CASE ajax_id.
      WHEN 'GET_TRAVEL_LIST'.
        CALL METHOD get_travel_list( ).

      WHEN 'COST_WBS_ITEMS'.
        CALL METHOD get_cost_assignments( ).
        CALL METHOD get_wbs_elements( ).

      WHEN 'VALIDATE_COST_ASSIGN'.
        CALL METHOD validate_cost_assign( server ).
      WHEN 'SAVE'.
        CALL METHOD save_travel( ).
        REFRESH it_travel_list.
        CALL METHOD get_travel_list( ).

      WHEN 'CANCEL_TRIP'.
        CALL METHOD save_travel( ).
        CALL METHOD get_travel_list( ).

      WHEN 'GET_COST_ASSIGNMENTS'.
        CALL METHOD get_cost_assignments( ).

      WHEN 'GET_COST_ASSIGNMENTS_WBS'.
        CALL METHOD get_wbs_elements( ).

      WHEN 'PERFORM_ENQUEUE'.
        CALL METHOD perform_enqueue( ajax_value ).

      WHEN 'ON_SELECT_LISTITEM'.
        CALL METHOD on_select_listitem( ajax_value ).

      WHEN 'GET_TILE_INFO'.
        CALL METHOD get_tile_info( server ).
    ENDCASE.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_ND_ESS_TRAVEL_REQ->/NEPTUNE/IF_NAD_SERVER~HANDLE_ON_REQUEST
* +-------------------------------------------------------------------------------------------------+
* | [--->] APPLID                         TYPE        STRING
* | [--->] SERVER                         TYPE REF TO /NEPTUNE/CL_NAD_SERVER
* | [--->] KEY_ID                         TYPE        STRING(optional)
* | [--->] KEY                            TYPE        STRING
* | [--->] REQUEST                        TYPE        /NEPTUNE/DATA_REQUEST
* | [<-->] NAV_TO                         TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD /neptune/if_nad_server~handle_on_request.
    DATA: lv_pernr  TYPE pernr_d,
          lv_reinr  TYPE reinr,
          lv_pdfx   TYPE xstring,
          lt_return TYPE STANDARD TABLE OF bapiret2.
    IF key EQ 'GET_PDF'.

      lv_pernr = key_id(8).
      lv_reinr = key_id+8(10).

*      CALL METHOD me->get_travel_pdf
*        EXPORTING
*          l_pernr = lv_pernr
*          l_reinr = lv_reinr.

* Generate PDF
      CALL FUNCTION 'PTRA_WEB_EXPENSE_FORM_PDF_GET'
        EXPORTING
          i_employeenumber = lv_pernr
          i_tripnumber     = lv_reinr
        IMPORTING
          e_tripform_pdf   = lv_pdfx
        TABLES
          et_return        = lt_return.

      IF lv_pdfx IS NOT INITIAL.
*        lv_pdf =  wa_travel_head-pdf.
        CALL METHOD server->api_response_xstring
          EXPORTING
            data         = lv_pdfx
            content_type = 'application/pdf'
*           file_name    =
          .
      ENDIF.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_ND_ESS_TRAVEL_REQ->/NEPTUNE/IF_NAD_SERVER~HANDLE_ON_RESPONSE
* +-------------------------------------------------------------------------------------------------+
* | [--->] APPLID                         TYPE        STRING
* | [--->] SERVER                         TYPE REF TO /NEPTUNE/CL_NAD_SERVER
* | [--->] EVENT_ID                       TYPE        STRING
* | [--->] EVENT_KEY                      TYPE        STRING
* | [--->] KEY_ID                         TYPE        STRING(optional)
* | [--->] KEY                            TYPE        STRING
* | [--->] REQUEST                        TYPE        /NEPTUNE/DATA_REQUEST
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD /neptune/if_nad_server~handle_on_response.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_ND_ESS_TRAVEL_REQ->/NEPTUNE/IF_NAD_SERVER~HANDLE_ON_SUBMIT
* +-------------------------------------------------------------------------------------------------+
* | [--->] APPLID                         TYPE        STRING
* | [--->] EVENT_ID                       TYPE        STRING
* | [--->] EVENT_VALUE                    TYPE        STRING(optional)
* | [--->] SERVER                         TYPE REF TO /NEPTUNE/CL_NAD_SERVER
* | [--->] REQUEST                        TYPE        /NEPTUNE/DATA_REQUEST
* | [<-->] NAV_TO                         TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD /neptune/if_nad_server~handle_on_submit.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_ND_ESS_TRAVEL_REQ->/NEPTUNE/IF_NAD_SERVER~HANDLE_ON_SYNC_IN
* +-------------------------------------------------------------------------------------------------+
* | [--->] APPLID                         TYPE        STRING
* | [--->] LASTSYNCDATE                   TYPE        STRING
* | [--->] IT_SYNC_DATA                   TYPE        /NEPTUNE/SYNC_DATA_TT
* | [<---] EX_STATUS                      TYPE        /NEPTUNE/SYNC_HEADER
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD /neptune/if_nad_server~handle_on_sync_in.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ND_ESS_TRAVEL_REQ->CANCEL_TRIP
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD cancel_trip.



    DATA: lv_reinr         TYPE reinr,
          it_return_cancel TYPE STANDARD TABLE OF bapireturn,
          wa_return_cancel TYPE bapireturn. "bapitrip-tripno.

    REFRESH it_return.

    lv_reinr = wa_travel_head-reinr.

    CALL FUNCTION 'ZMM_CANCEL_TRIP'
      EXPORTING
        personnel_number = gv_pernr
        trip_number      = lv_reinr
        comments         = gv_cancel_reason-cancel_reason
      IMPORTING
        return           = wa_return_cancel.

    IF wa_return_cancel-type EQ 'S'.
      CALL METHOD perform_dequeue( ).
    ENDIF.

    CASE wa_return_cancel-type .
      WHEN 'S' .
        wa_status-mss_text = 'Success'.
      WHEN 'I'.
        wa_status-mss_text = 'Information'.
      WHEN 'W'.
        wa_status-mss_text = 'Warning'.
      WHEN 'E'.
        wa_status-mss_text = 'Error'.
      WHEN OTHERS.
        wa_status-mss_text = 'None'.
    ENDCASE.

    wa_status-message = wa_return_cancel-message.
    APPEND wa_status TO it_status.
    CLEAR wa_status.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ND_ESS_TRAVEL_REQ->DEFAULT_COST_ASSIGNMENT
* +-------------------------------------------------------------------------------------------------+
* | [--->] GV_PERNR                       TYPE        PERNR_D
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD default_cost_assignment.

    SELECT SINGLE bukrs kostl gsber FROM pa0017 INTO wa_default_cost
    WHERE pernr EQ gv_pernr
    AND endda GE sy-datum.

    IF wa_default_cost-costcenter IS INITIAL.
      SELECT SINGLE bukrs kostl gsber FROM pa0001 INTO wa_default_cost
         WHERE pernr EQ gv_pernr
         AND endda GE sy-datum.
    ENDIF.

    SELECT SINGLE ktext FROM cskt INTO wa_default_cost-costcenter_name
      WHERE kostl EQ wa_default_cost-costcenter
      AND kokrs EQ wa_default_cost-comp_code
       AND spras EQ sy-langu.

    wa_default_cost-costdistno = '001'.
    wa_default_cost-new_record = 'X'.
    wa_default_cost-perc_share = '100'.
    wa_default_cost-reinr = 'New'.

    APPEND wa_default_cost TO it_default_cost.
    CLEAR wa_default_cost.
*      select SINGLE l_text INTO
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ND_ESS_TRAVEL_REQ->GET_ATTACHMENTS
* +-------------------------------------------------------------------------------------------------+
* | [--->] LV_INSTID_A                    TYPE        SRGBTBREL-INSTID_A
* | [--->] LV_REINR                       TYPE        REINR
* | [--->] SERVER                         TYPE REF TO /NEPTUNE/CL_NAD_SERVER(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_attachments.
    DATA:
      lv_doc_id    TYPE sofolenti1-doc_id,
      it_content   TYPE STANDARD TABLE OF solisti1,
      it_srgbtbrel TYPE STANDARD TABLE OF srgbtbrel,
      wa_content   TYPE solisti1,
      wa_srgbtbrel TYPE srgbtbrel,
      wa_doc       TYPE sofolenti1,
      wa_sofc      TYPE v_sofc.

    DATA: BEGIN OF lv_key,
            foltp TYPE so_fol_tp,
            folyr TYPE so_fol_yr,
            folno TYPE so_fol_no,
            doctp TYPE so_doc_tp,
            docyr TYPE so_doc_yr,
            docno TYPE so_doc_no,
          END OF lv_key.

    DATA: it_hex       TYPE STANDARD TABLE OF solix,
          it_header    TYPE STANDARD TABLE OF solisti1,
          wa_header    LIKE LINE OF it_header,
          lv_length    TYPE i,
          lv_content   TYPE xstring,
          lv_file_name TYPE string,
          lv_file_type TYPE string,
          lv_temp      TYPE string,
          lv_mime_type TYPE string.

    SELECT * FROM srgbtbrel INTO TABLE it_srgbtbrel
             WHERE instid_a EQ lv_instid_a
             AND typeid_a EQ 'BUS2089'.

    CHECK sy-subrc EQ 0.
    SORT it_srgbtbrel BY instid_b.
    DELETE ADJACENT DUPLICATES FROM it_srgbtbrel COMPARING instid_b.

    LOOP AT it_srgbtbrel INTO wa_srgbtbrel.
      lv_key = wa_srgbtbrel-instid_b.

*   Get Document Info
      SELECT SINGLE *
             FROM v_sofc
             INTO wa_sofc
             WHERE foltp EQ lv_key-foltp
               AND folyr EQ lv_key-folyr
               AND folno EQ lv_key-folno
               AND doctp EQ lv_key-doctp
               AND docyr EQ lv_key-docyr
               AND docno EQ lv_key-docno.

      CHECK sy-subrc EQ 0.

      lv_doc_id = wa_srgbtbrel-instid_b.

*      GET content
      CALL FUNCTION 'SO_DOCUMENT_READ_API1'
        EXPORTING
          document_id                = lv_doc_id
        IMPORTING
          document_data              = wa_doc
        TABLES
          object_header              = it_header
          contents_hex               = it_hex
        EXCEPTIONS
          document_id_not_exist      = 1
          operation_no_authorization = 2
          x_error                    = 3
          OTHERS                     = 4.

*  Filename
      READ TABLE it_header INTO wa_header INDEX 1.
      SPLIT wa_header AT '=' INTO lv_temp
                                  lv_file_name.
      SPLIT lv_file_name AT '.' INTO lv_temp
                                     lv_file_type.
      TRANSLATE lv_file_type TO UPPER CASE.

      MOVE-CORRESPONDING wa_doc TO wa_attachment.
      wa_attachment-reinr       = lv_reinr.
      wa_attachment-instid_a    = wa_srgbtbrel-instid_a.
      wa_attachment-typeid_a    = wa_srgbtbrel-typeid_a.
      wa_attachment-instid_b    = wa_srgbtbrel-instid_b.
      wa_attachment-crdat = wa_sofc-crdat.
      wa_attachment-docdes      = wa_sofc-docdes.
      wa_attachment-file_ext    = wa_sofc-file_ext.
      wa_attachment-file_size   = wa_sofc-objlen.

      lv_length = wa_doc-doc_size.

      CALL FUNCTION 'SCMS_BINARY_TO_XSTRING'
        EXPORTING
          input_length = lv_length
        IMPORTING
          buffer       = lv_content
        TABLES
          binary_tab   = it_hex
        EXCEPTIONS
          failed       = 1
          OTHERS       = 2.

      CALL FUNCTION 'SCMS_BASE64_ENCODE_STR'
        EXPORTING
          input  = lv_content
        IMPORTING
          output = wa_attachment-content.

*      CONCATENATE 'data:application/pdf;base64,' wa_attachment-content
*        INTO wa_attachment-content.

*      wa_attachment-content = lv_content.
      SHIFT wa_attachment-file_size LEFT DELETING LEADING '0'.
      wa_attachment-file_size = wa_attachment-file_size / 1000000.
      wa_attachment-file_size  = round( val = wa_attachment-file_size  dec = 2 ).

      APPEND wa_attachment TO it_attachment.
      CLEAR  wa_attachment.

**Response
*     CALL METHOD server->api_response_xstring
*        EXPORTING
*          data         = lv_content
*          file_name    = lv_file_name
*          content_type = lv_mime_type.


    ENDLOOP.




  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ND_ESS_TRAVEL_REQ->GET_COST_ASSIGNMENTS
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_cost_assignments.

*    TYPES:BEGIN OF ty_ctxt,
*            ktext TYPE cskt-ktext,
*            kostl TYPE cskt-kostl,
*          END OF ty_ctxt.
*
*    DATA: it_ctxt             TYPE STANDARD TABLE OF ty_ctxt,
*          wa_ctxt             TYPE ty_ctxt,
*          wa_cost_assignments LIKE LINE OF it_cost_assignments.
*
*    DATA: t_kostl TYPE STANDARD TABLE OF /neptune/range_structure,
*          t_bukrs TYPE STANDARD TABLE OF /neptune/range_structure,
*          t_gsber TYPE STANDARD TABLE OF /neptune/range_structure,
*          t_kokrs TYPE STANDARD TABLE OF /neptune/range_structure,
*          s_kokrs TYPE /neptune/range_structure,
*          s_kostl TYPE /neptune/range_structure,
*          s_bukrs TYPE /neptune/range_structure,
*          s_gsber TYPE /neptune/range_structure.
*
*
*    READ TABLE it_empinfo INTO wa_empinfo INDEX 1.
*    IF sy-subrc EQ 0.
**      *------------------Select without search paramerters-------------------*
*      SELECT a~kokrs a~kostl a~bukrs a~bkzer b~ktext FROM csks
*        AS a INNER JOIN cskt AS b
*        ON a~kostl EQ b~kostl
*        INTO TABLE it_cost_assignments
*        WHERE a~datbi GE sy-datum
*        AND a~kokrs EQ '1000'
*        AND a~gsber EQ wa_empinfo-bus_area
*        AND a~bukrs EQ wa_empinfo-comp_code
*        AND b~spras EQ sy-langu.
*
*      LOOP AT it_cost_assignments INTO wa_cost_assignments.
*        wa_cost_assignments-lock_indicator = wa_cost_assignments-bkzer.
*        CONCATENATE wa_cost_assignments-ktext wa_cost_assignments-kostl INTO wa_cost_assignments-filter.
*        MODIFY it_cost_assignments FROM wa_cost_assignments TRANSPORTING filter lock_indicator.
*      ENDLOOP.
*
*    ELSE.
**--------------Select if search parameters provided----------------*
*      IF search_cost_assignments-kokrs IS NOT INITIAL.
*        s_kokrs-sign = 'I'.
*        s_kokrs-option = 'EQ'.
*        s_kokrs-low = search_cost_assignments-kokrs.
*        APPEND s_kokrs TO t_kokrs.
*        CLEAR s_kokrs.
*      ENDIF.
*
*      IF search_cost_assignments-kostl IS NOT INITIAL.
*        s_kostl-sign = 'I'.
*        s_kostl-option = 'EQ'.
*        s_kostl-low = search_cost_assignments-kostl.
*        APPEND s_kostl TO t_kostl.
*        CLEAR s_kostl.
*      ENDIF.
*
*      IF search_cost_assignments-bukrs IS NOT INITIAL.
*        s_bukrs-sign = 'I'.
*        s_bukrs-option = 'EQ'.
*        s_bukrs-low = search_cost_assignments-bukrs.
*        APPEND s_bukrs TO t_bukrs.
*        CLEAR s_bukrs.
*      ENDIF.
*
*      IF search_cost_assignments-gsber IS NOT INITIAL.
*        s_gsber-sign = 'I'.
*        s_gsber-option = 'EQ'.
*        s_gsber-low = search_cost_assignments-gsber.
*        APPEND s_gsber TO t_gsber.
*        CLEAR s_gsber.
*      ENDIF.
*
*      SELECT kokrs kostl bukrs bkzer FROM csks
*        INTO TABLE it_cost_assignments
*        UP TO search_cost_assignments-n_entries ROWS
*        WHERE kokrs IN t_kokrs
*        AND kostl IN t_kostl
*        AND bukrs IN t_bukrs
*        AND gsber IN t_gsber.
*
*      SELECT ktext kostl FROM cskt INTO TABLE it_ctxt
*        FOR ALL ENTRIES IN it_cost_assignments
*       WHERE kostl EQ it_cost_assignments-kostl.
*
*      LOOP AT it_cost_assignments INTO wa_cost_assignments.
*        READ TABLE it_ctxt INTO wa_ctxt WITH KEY kostl = wa_cost_assignments-kostl.
*        wa_cost_assignments-ktext = wa_ctxt-ktext.
*        wa_cost_assignments-lock_indicator = wa_cost_assignments-bkzer.
*
*        CONCATENATE wa_cost_assignments-ktext wa_cost_assignments-kostl INTO wa_cost_assignments-filter.
*        MODIFY it_cost_assignments FROM wa_cost_assignments TRANSPORTING ktext filter lock_indicator.
*      ENDLOOP.
*    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ND_ESS_TRAVEL_REQ->GET_EMPLOYEE_NUMBER
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_employee_number.
    CHECK gv_pernr IS INITIAL.

    SELECT SINGLE pernr
           FROM pa0105
           INTO gv_pernr
           WHERE usrty EQ '0001'
             AND usrid EQ sy-uname
             AND endda GE sy-datum
             AND begda LE sy-datum.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ND_ESS_TRAVEL_REQ->GET_STATUS_REPORT
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_status_report.

    DATA: t_infotab TYPE STANDARD TABLE OF ztrav_info,
          w_infotab TYPE ztrav_info.

    DATA: lv_commentkey TYPE sofolenti1-doc_id.

    DATA: e_pernr            TYPE STANDARD TABLE OF selopt,
          e_reinr            TYPE STANDARD TABLE OF selopt,
          e_begda            TYPE STANDARD TABLE OF selopt,
          e_endda            TYPE STANDARD TABLE OF selopt,
          e_wfdat            TYPE STANDARD TABLE OF selopt,
          e_wftim            TYPE STANDARD TABLE OF selopt,
          w_pernr            TYPE selopt,
          w_reinr            TYPE selopt,
          lv_count_status(3) TYPE c.
*
*
*PERNR
    w_pernr-sign = 'I'.
    w_pernr-option = 'EQ'.
    w_pernr-low = gv_pernr.
    APPEND w_pernr TO e_pernr.
    CLEAR w_pernr.
*REINR
    w_reinr-sign = 'I'.
    w_reinr-option = 'EQ'.
    w_reinr-low = wa_travel_head-reinr.
    APPEND w_reinr TO e_reinr.
    CLEAR w_reinr.

    CALL FUNCTION 'ZWF_TRAVEL_WORKFLOW_INFO'
      EXPORTING
        requests = 'X'
        expenses = 'X'
*       AGENT    =
*       STATUS_CODE       =
      TABLES
        s_pernr  = e_pernr
        s_reinr  = e_reinr
        s_begda  = e_begda
        s_endda  = e_endda
*       S_CNTRY  =e_zland
        s_wfdat  = e_wfdat
        s_wftim  = e_wftim
        infotab  = t_infotab.


    LOOP AT t_infotab INTO w_infotab.
      MOVE-CORRESPONDING w_infotab TO wa_status_report.
      IF w_infotab-commentkey IS NOT INITIAL.
        lv_commentkey = w_infotab-commentkey.
        wa_status_report-comment_visibility = 'X'.
        CALL FUNCTION 'ZWF_GET_SOFM_COMMENTS_TEXT'
          EXPORTING
            sofm_key        = lv_commentkey
          IMPORTING
            comments_string = wa_status_report-comments.
      ENDIF.

       wa_status_report-text_visibility = ''.
      APPEND wa_status_report TO it_status_report.
      CLEAR wa_status_report.
    ENDLOOP.

* Adding 'Next step' term under comments column
    DESCRIBE TABLE it_status_report LINES lv_count_status.
    READ TABLE it_status_report INTO wa_status_report INDEX lv_count_status.

    wa_status_report-text_visibility = 'X'.
    wa_status_report-comments = wa_status_report-reason.

    MODIFY it_status_report FROM wa_status_report INDEX lv_count_status
                                          TRANSPORTING comments
                                                       text_visibility.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ND_ESS_TRAVEL_REQ->GET_TILE_INFO
* +-------------------------------------------------------------------------------------------------+
* | [--->] SERVER                         TYPE REF TO /NEPTUNE/CL_NAD_SERVER
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_tile_info.

    CALL METHOD get_employee_number( ).

    DATA: it_count TYPE STANDARD TABLE OF ptrv_perio,
          lv       TYPE string,
          lv_date  TYPE sy-datum.

    lv_date = sy-datum - 180.

    SELECT * FROM ptrv_perio INTO TABLE it_count
      WHERE antrg IN (1,2,5)
      AND   pdatv GE lv_date
      AND   pernr EQ gv_pernr
      AND   abrec NE '3'.

    DESCRIBE TABLE it_count LINES lv.



    CALL METHOD server->api_tile_info
      EXPORTING
        number      = lv
        number_unit = 'Travel Requests'
*       info        =
*       info_state  =
*       title       =
*       indicator   =
        valuecolor  = 'Critical'
*       value1      =
*       value2      =
*       value3      =
*       color1      =
*       color2      =
*       color3      =
*       title1      =
*       title2      =
*       title3      =
*       content     =
*       footer      =
*       image       =
      .
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ND_ESS_TRAVEL_REQ->GET_TRAVEL_LIST
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_travel_list.


    DATA: it_perio       TYPE STANDARD TABLE OF ptp42,
          it_head        TYPE STANDARD TABLE OF ptp02,
          lv_t706t       TYPE t706t,
          wa_head        LIKE LINE OF it_head,
          wa_perio       LIKE LINE OF it_perio,
          wa_trip_schema LIKE LINE OF it_trip_schema,
          wa_travel_list TYPE ty_travel_list,
          lv_date        TYPE sy-datum.

    DATA: lv_framedata      TYPE bapitrmain,
          lv_text_key       TYPE string,
          lv_travel_head    LIKE LINE OF it_travel_head,
          lv_status         TYPE bapitrstao,
          wa_text           LIKE LINE OF it_text,
          lv_attachment_key TYPE srgbtbrel-instid_a.

    DATA: lv     TYPE c,
          lv1(3) TYPE c,
          ind    TYPE c.

    CALL METHOD get_employee_number( ).
    CALL METHOD get_travel_setup( ).
    lv_date = sy-datum - 90.

*Get List of Travels
    CALL FUNCTION 'TRIPS_LIST_PERIO_HEAD'
      EXPORTING
        employeenumber         = gv_pernr
        old_versions           = space
        i_show_trips_from_date = lv_date
      TABLES
        perio                  = it_perio
        head                   = it_head
      EXCEPTIONS
        table_perio_read_error = 1
        table_head_read_error  = 2
        tables_inconsistent    = 3
        OTHERS                 = 4.


*Storing all trips for frontend validation
    it_all_trips[] = it_perio[].


    DATA: w_antrg TYPE selopt,
          s_antrg TYPE STANDARD TABLE OF selopt.


    w_antrg-sign = 'I'.
    w_antrg-option = 'EQ'.
    w_antrg-low = '3'.
    APPEND w_antrg TO s_antrg.
    CLEAR w_antrg.

    w_antrg-sign = 'I'.
    w_antrg-option = 'EQ'.
    w_antrg-low = '4'.
    APPEND w_antrg TO s_antrg.
    CLEAR w_antrg.

    w_antrg-sign = 'I'.
    w_antrg-option = 'EQ'.
    w_antrg-low = '6'.
    APPEND w_antrg TO s_antrg.
    CLEAR w_antrg.


* Remove trips which aren't requests.
    DELETE it_perio WHERE antrg IN s_antrg.  "Delete 3,4 and 6.
    DELETE it_perio WHERE abrec EQ '3'.    "Delete Cancelled trips

    LOOP AT it_head INTO wa_head.
      READ TABLE it_perio INTO wa_perio WITH KEY reinr = wa_head-reinr.
      IF sy-subrc EQ 0.
*   Move to Travel List
        MOVE-CORRESPONDING wa_head  TO wa_travel_list.
        MOVE-CORRESPONDING wa_perio TO wa_travel_list.


        wa_travel_list-pernr = gv_pernr.
        wa_travel_list-location = wa_head-zort1.
        wa_travel_list-country = wa_head-zland.
        wa_travel_list-country_grp = wa_head-molga.
        wa_travel_list-tp_variant = wa_head-morei.


        wa_travel_list-datedep = wa_perio-pdatv.
        wa_travel_list-datearr = wa_perio-pdatb.
        wa_travel_list-timearr = wa_perio-puhrb.
        wa_travel_list-timedep = wa_perio-puhrv.
        wa_travel_list-appvl_status = wa_perio-antrg.
        wa_travel_list-settl_status = wa_perio-abrec.
        wa_travel_list-pay_curr = wa_perio-waers.
        wa_travel_list-t_actype = wa_head-kztkt.

        IF wa_perio-antrg EQ 5
          AND wa_perio-abrec EQ 0.
          wa_travel_list-status_txt1 = 'DRAFT'.
          wa_travel_list-update_color = 'Success'.
        ELSEIF wa_perio-antrg EQ 5
           AND wa_perio-abrec EQ 1.
          wa_travel_list-status_txt1 = 'RETURNED BY APPROVER'.
          wa_travel_list-update_color = 'Success'.
        ELSEIF wa_perio-antrg EQ 1
           AND wa_perio-abrec EQ 1.
          wa_travel_list-status_txt1 = 'AWAITING APPROVAL'.
          wa_travel_list-update_color = 'Error'.
        ELSEIF wa_perio-antrg EQ 2
          AND wa_perio-abrec EQ 1.
          wa_travel_list-status_txt1 = 'REQUEST APPROVED'.
          wa_travel_list-update_color = 'Success'.
        ENDIF.


        IF  wa_travel_list-update_color is INITIAL.
            wa_travel_list-update_color = 'None'.
        ENDIF.

        CALL FUNCTION 'PTRV_GET_REIMBURSEMENT_AMOUNT'
          EXPORTING
            employeenumber               = gv_pernr
            tripnumber                   = wa_head-reinr
            period                       = wa_perio-perio
          IMPORTING
            reimbursement_amount         = wa_travel_list-trip_total
            currency                     = wa_travel_list-pay_curr
          EXCEPTIONS
            no_entry_in_ptrv_shdr        = 1
            error_in_currency_conversion = 2
            trip_prior_to_userprefs      = 3
            OTHERS                       = 4.

        wa_travel_list-status     = 'None'.

**   travel type
        READ TABLE it_trip_schema INTO wa_trip_schema WITH KEY t_schema = wa_head-schem.
        IF sy-subrc EQ 0.
          SELECT SINGLE *
                 FROM t706t
                 INTO lv_t706t
                 WHERE spras EQ sy-langu
                   AND morei EQ wa_head-morei
                   AND schem EQ wa_head-schem.

          wa_travel_list-t_schema = wa_head-schem.
          wa_travel_list-schem_txt = lv_t706t-stext.
*        wa_trip_schema-t_schema = wa_head-schem.
*        wa_trip_schema-shorttxt = lv_t706t-stext.
*        APPEND wa_trip_schema TO it_trip_schema.
        ENDIF.
* ADD Country text
        READ TABLE it_countries INTO wa_countries WITH KEY country = wa_travel_head-country.
        IF sy-subrc EQ 0.
          wa_travel_list-countrytxt =   wa_countries-countrytxt.
        ENDIF.

        wa_travel_list-approvername = lv_approver_name.  "  Add Aprover Name

*   Get Estimated costs amount
        SELECT SINGLE estimated_cost INTO wa_travel_list-estimated_cost
          FROM ftpt_req_head WHERE pernr EQ gv_pernr
                              AND reinr = wa_travel_list-reinr.

        CONCATENATE wa_travel_list-reinr  wa_travel_list-location wa_travel_list-datedep INTO
         wa_travel_list-filter.

* Current User Name
        wa_travel_list-user_name = sy-uname.

** * Add Authorization Role....
*        IF user_has_display_only IS NOT INITIAL.
*          wa_travel_list-display_only_role = 'X'.
*        ENDIF.

*  Add Activity type Text
        SELECT SINGLE tktxt INTO wa_travel_list-activity_txt FROM t706r
          WHERE kztkt EQ wa_head-kztkt
          AND  spras EQ sy-langu
          AND morei EQ wa_head-morei.

        APPEND wa_travel_list TO it_travel_list.
        CLEAR wa_travel_list.
      ENDIF.
    ENDLOOP.



    SORT it_travel_list BY reinr DESCENDING.

    CALL METHOD me->default_cost_assignment
      EXPORTING
        gv_pernr = gv_pernr.

    CALL METHOD user_parameters( ).


*    DELETE it_travel_list WHERE t_schema EQ 'PL' AND appvl_status NE '2'.

*      CALL FUNCTION 'BAPI_TRIP_GET_DETAILS'
*        EXPORTING
*          employeenumber = gv_pernr
*          tripnumber     = wa_head-reinr
*          language       = sy-langu
*        IMPORTING
**         RETURN         =
*          framedata      = lv_framedata
*          status         = lv_status.
*      MOVE-CORRESPONDING lv_framedata TO wa_travel_list.

*      wa_travel_list-datedep = lv_framedata-dep_date  .
*      wa_travel_list-datearr = lv_framedata-arr_date  .
*      wa_travel_list-timearr = lv_framedata-arr_time  .
*      wa_travel_list-timedep = lv_framedata-dep_time  .



*     wa_travel_list- wa_travel_list-appvl_status = lv_status-approved.
*      wa_travel_list-settl_status = lv_status-account.
*      wa_travel_list-status_txt = lv_status-appr_txt.
*      wa_travel_list-status_txt1 = lv_status-acc_text.



*      CLEAR wa_travel_head.
*      MOVE-CORRESPONDING wa_travel_list TO wa_travel_head.





** Read Country text
*      READ TABLE it_countries INTO wa_countries WITH KEY country = wa_travel_head-country.
*      IF sy-subrc EQ 0.
*        wa_travel_head-countrytxt =   wa_countries-countrytxt.
*      ENDIF.
*
**--------------------------------------------------------------------*
**Get Attachments
*      CONCATENATE gv_pernr wa_travel_list-reinr INTO  lv_attachment_key.
*      CALL METHOD me->get_attachments
*        EXPORTING
*          lv_instid_a = lv_attachment_key
*          lv_reinr    = wa_travel_list-reinr.
*
**--------------------------------------------------------------------*
**   Build Comment
*      LOOP AT it_text INTO wa_text WHERE textid EQ 'TEXT'.
*        CONCATENATE wa_travel_head-editor
*                    wa_text-textline
*                    cl_abap_char_utilities=>cr_lf
*                    INTO wa_travel_head-editor.
*      ENDLOOP.
*
**--------------------------------------------------------------------*
*      LOOP AT it_loc_receipts INTO wa_loc_receipts.
*        MOVE-CORRESPONDING wa_loc_receipts TO wa_expenses.
**        Expenses addintional Information
*        READ TABLE it_loc_addinfo INTO wa_loc_addinfo WITH KEY receiptno = wa_expenses-receiptno.
*        IF sy-subrc EQ 0.
*          MOVE-CORRESPONDING wa_loc_addinfo TO wa_expenses.
*        ENDIF.
**      Provider Category and Name
*        READ TABLE it_providers INTO wa_providers WITH KEY provider = wa_expenses-p_prv.
*        IF sy-subrc EQ 0.
*          wa_expenses-providecode_text = wa_providers-name.
*        ENDIF.
*        wa_expenses-reinr = wa_travel_list-reinr.
*        APPEND wa_expenses TO it_expenses.
*        CLEAR wa_expenses.
*      ENDLOOP.
**--------------------------------------------------------------------*
**Mileage
*      CALL FUNCTION 'PTRA_WEB_MILEAGE_GET'
*        EXPORTING
*          i_employeenumber = gv_pernr
*          i_tripnumber     = wa_travel_list-reinr
*          i_periodnumber   = wa_travel_list-perio
*          i_periodversion  = wa_travel_list-pdvrs
*          i_language       = sy-langu
*          i_trip_action    = 'MOD'
*        IMPORTING
*          et_mileage       = it_loc_mileage
*        TABLES
*          et_return        = it_return.
*
*      LOOP AT it_loc_mileage INTO wa_loc_mileage.
*        MOVE-CORRESPONDING wa_loc_mileage TO wa_mileage.
*        wa_mileage-reinr = wa_travel_list-reinr.
*
**Adding Vehicle type Text
*        READ TABLE it_vehicle_types INTO wa_vehicle_types WITH KEY veh_type = wa_mileage-veh_type.
*        IF sy-subrc EQ 0.
*          wa_mileage-vehicle_text = wa_vehicle_types-veh_typtxt.
*        ENDIF.
*
***     comment
**        CONCATENATE 'M' wa_mileage-key_mile INTO lv_text_key.
**        CLEAR wa_mileage-comment.
**        LOOP AT it_text INTO wa_text WHERE textid EQ lv_text_key.
**          CONCATENATE wa_mileage-comment
**                      wa_text-textline
**                      cl_abap_char_utilities=>cr_lf
**                      INTO wa_mileage-comment.
**        ENDLOOP.
*
*        APPEND wa_mileage TO it_mileage.
*        CLEAR  wa_mileage.
*      ENDLOOP.
*
**--------------------------------------------------------------------*
**Additional Destinations
*      CALL FUNCTION 'PTRA_WEB_ITINERARY_GET'
*        EXPORTING
*          i_employeenumber = gv_pernr
*          i_tripnumber     = wa_travel_list-reinr
*          i_periodnumber   = wa_travel_list-perio
*          i_periodversion  = wa_travel_list-pdvrs
*          i_language       = sy-langu
**         I_TRIP_SCHEMA    =
*          i_trip_action    = 'MOD'
**         I_TRIP_COMPONENT = ' '
*        IMPORTING
*          et_itinerary     = it_loc_stopover
*        TABLES
*          et_return        = it_return.
*      LOOP AT it_loc_stopover INTO wa_loc_stopover.
*        MOVE-CORRESPONDING wa_loc_stopover TO wa_stopover.
*        wa_stopover-reinr = wa_travel_list-reinr.
*        APPEND wa_stopover TO it_stopover.
*        CLEAR  wa_stopover.
*      ENDLOOP.
*
**--------------------------------------------------------------------*
**Cost Center Assignment for entire Trip
*
*      CALL FUNCTION 'PTRA_WEB_COSTDIST_GET'
*        EXPORTING
*          i_employeenumber       = gv_pernr
*          i_tripnumber           = wa_travel_list-reinr
*          i_periodnumber         = wa_travel_list-perio
*          i_periodversion        = wa_travel_list-pdvrs
*          i_language             = sy-langu
**         I_TRIP_SCHEMA          =
*          i_trip_action          = 'MOD'
**         I_TRIP_COMPONENT       = ' '
*          i_cost_assignment_type = 'T'
**         I_REF_KEY              =
*        IMPORTING
*          et_costdist            = it_loc_cost
*        TABLES
*          et_return              = it_return.
*
*      LOOP AT it_loc_cost INTO wa_loc_cost.
*        wa_cost-reinr = wa_travel_list-reinr.
*        MOVE-CORRESPONDING wa_loc_cost TO wa_cost.
*        APPEND wa_cost TO it_cost.
*        CLEAR  wa_cost.
*      ENDLOOP.
*
*
*
*
**--------------------------------------------------------------------*
**  Cost Assignment for Mileage
*
*      CALL FUNCTION 'PTRA_WEB_COSTDIST_MILE_GET'
*        EXPORTING
*          i_employeenumber = gv_pernr
*          i_tripnumber     = wa_travel_list-reinr
*          i_periodnumber   = '000'
*          i_periodversion  = '00'
*          i_language       = sy-langu
*          i_trip_action    = 'MOD'
*        IMPORTING
*          et_costdist_mile = it_loc_costdist_mile
*        TABLES
*          et_return        = it_return.
*
*      LOOP AT it_loc_costdist_mile INTO wa_loc_costdist_mile.
*        wa_cost_mileage-reinr = wa_travel_list-reinr.
*        MOVE-CORRESPONDING wa_loc_costdist_mile TO wa_cost_mileage.
*        APPEND wa_cost_mileage TO it_cost_mileage.
*        CLEAR wa_cost_mileage.
*      ENDLOOP.

*--------------------------------------------------------------------*

*--------------------------------------------------------------------*

*    ENDLOOP.

*    SORT it_cost BY reinr costdistno.
*    SORT it_stopover    BY reinr key_stop .
*    SORT it_mileage BY reinr key_mile .
*    SORT it_travel_head BY reinr DESCENDING.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ND_ESS_TRAVEL_REQ->GET_TRAVEL_PDF
* +-------------------------------------------------------------------------------------------------+
* | [--->] L_PERNR                        TYPE        PERNR_D(optional)
* | [--->] L_REINR                        TYPE        REINR(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_travel_pdf.

    DATA: lv_pdfx   TYPE xstring,
          lt_return TYPE bapirettab.

    DATA: lt_html TYPE STANDARD TABLE OF swr_txtlin,
          ls_html TYPE swr_txtlin,
          lv_line TYPE string,
          lv_key  TYPE swo_objid.


    CONCATENATE l_pernr l_reinr INTO lv_key.

    CALL FUNCTION 'Z_MW_GET_TRIP_REQUEST_HTML5'
      EXPORTING
        x_objkey  = lv_key
        x_objtype = 'BUS2089'
        x_print   = 'X'
      TABLES
        yt_html   = lt_html.


    LOOP AT lt_html INTO ls_html.
      CONCATENATE lv_line ls_html-textline INTO lv_line.
      wa_travel_head-html = lv_line.
    ENDLOOP.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ND_ESS_TRAVEL_REQ->GET_TRAVEL_SETUP
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_travel_setup.

    TYPES:BEGIN OF ty_t706b1,
            morei TYPE t706b1-morei,
            spkzl TYPE t706b1-spkzl,
            beart TYPE t706b1-beart,
            scdv1 TYPE t706b1-scdv1,
            scdb1 TYPE t706b1-scdb1,
            scdec TYPE t706b1-scdec,
            scprv TYPE t706b1-scprv,
            p_ctg TYPE t706b1-p_ctg,
          END OF ty_t706b1.

    DATA: it_t706b1 TYPE STANDARD TABLE OF ty_t706b1,
          wa_t706b1 TYPE ty_t706b1.
    DATA: it_cost_objects TYPE STANDARD TABLE OF bapipsref.

    data: lv_prev_row       type ztrip_row_number.

    data: ls_t706www        type t706www,
          ls_t706www_txt    type t706www_txt,
          ls_travel_links   type ty_travel_links.

    data: lt_t706www        type standard table of t706www,
          lt_t706www_txt    type standard table of t706www_txt.

*    Get Approver Name for PERNR
    CALL FUNCTION 'ZWF_CHECK_APPROVER_INFO'
      EXPORTING
        personnelnumber            = gv_pernr
        eval_path                  = 'AN02'
      IMPORTING
        approverpernr              = lv_approver_pernr
      EXCEPTIONS
        no_emp_userid_found        = 1
        no_emp_email_found         = 2
        no_approver_found          = 3
        no_appr_userid_found       = 4
        no_appr_email_found        = 5
        empl_approver_same         = 6
        no_coord_email_found       = 7
        no_email_for_substitute    = 8
        no_employee_for_substitute = 9
        OTHERS                     = 10.

    SELECT SINGLE ename FROM pa0001 INTO lv_approver_name
      WHERE pernr EQ lv_approver_pernr AND endda GE sy-datum.


* Get Trip Setup
    CALL FUNCTION 'BAPI_TRIP_GET_OPTIONS'
      EXPORTING
        employeenumber          = gv_pernr
      TABLES
        emp_info                = it_emp_info
        defaults                = it_defaults
        expense_types           = it_expense_types
        countries               = it_countries
        currencies              = it_currencies
        trip_types_statuatory   = it_statuatory
        trip_activities         = it_activities
        cost_objects            = it_cost_objects
        vehicle_types           = it_vehicle_types
        trip_schemas            = it_trip_schema
        field_selection_general = it_field_general.

    REFRESH it_expense_types. "It's mandatory for FM but not required in our case

*Expense Types
*Get Expense type acc. to Trip Variant of Employee
    READ TABLE it_emp_info INTO wa_emp_info INDEX 1.

*Get States abbr and names for US
    SELECT a~bland b~bezei
      FROM t005s AS a INNER JOIN t005u
      AS b ON a~land1 = b~land1
      INTO TABLE it_states
      WHERE a~land1 EQ 'US'
      AND a~bland EQ b~bland
      AND b~spras EQ 'EN'.

    LOOP AT it_states INTO wa_states.
      CONCATENATE wa_states-bland ' - ' wa_states-bezei INTO wa_states-state_txt.
      MODIFY it_states FROM wa_states INDEX sy-tabix TRANSPORTING state_txt.
    ENDLOOP.



*add futher details to employee inforation table
    LOOP AT it_emp_info INTO wa_emp_info.
      MOVE-CORRESPONDING wa_emp_info TO wa_empinfo.
      wa_empinfo-approvername = lv_approver_name.
      APPEND wa_empinfo TO it_empinfo.
      CLEAR wa_empinfo.
    ENDLOOP.


* Insert empty line
*    APPEND INITIAL LINE TO it_vehicle_types.
*    APPEND INITIAL LINE TO it_expense_types.
*    APPEND INITIAL LINE TO it_countries.

    DELETE it_vehicle_types WHERE veh_type IS INITIAL.
    DELETE it_field_general WHERE transaction_code NE 'TRIP'.
    DELETE it_currencies WHERE currtxt IS INITIAL.
    SORT it_countries BY country.
    DELETE it_countries WHERE region IS NOT INITIAL.

* Delete Schemas
*    DELETE it_trip_schema WHERE shorttxt IS INITIAL.
*    DELETE it_trip_schema WHERE t_schema EQ '99'
*                             OR t_schema EQ 'SP'
*                             OR t_schema EQ 'VS'
*                             OR t_schema EQ 'PL'.

* Sorting
*   SORT it_expense_types BY exp_text.
    SORT it_vehicle_types BY veh_type.
    SORT it_countries     BY countrytxt.
    SORT it_trip_schema   BY shorttxt.
    SORT it_currencies    BY f_currency.

*   Create Travel Links
    refresh: it_travel_links,
             lt_t706www,
             lt_t706www_txt.

    clear:   ls_travel_links.

    select * from t706www into table lt_t706www
                          where morei = wa_emp_info-trip_provision_variant
                          and   type  = 'R'.
    if sy-subrc = 0.
       select * from t706www_txt into table lt_t706www_txt
                                 where spras = sy-langu
                                 and   morei = wa_emp_info-trip_provision_variant
                                 and   type = 'R'.
    endif.

    sort    lt_t706www by zz_row zz_column.

    loop at lt_t706www into ls_t706www.
       if sy-tabix = 1.
          lv_prev_row = ls_t706www-zz_row.
       endif.

       if ls_t706www-zz_row <> lv_prev_row.
          append ls_travel_links to it_travel_links.
          lv_prev_row = ls_t706www-zz_row.
          clear ls_travel_links.
       endif.

       read table lt_t706www_txt into ls_t706www_txt with key numb = ls_t706www-numb.
       if sy-subrc <> 0.
          ls_t706www_txt = 'URL text not configured'.
       endif.

       case ls_t706www-zz_column.
          when 1.
             ls_travel_links-col1_urlink      = ls_t706www-urlink.
             ls_travel_links-col1_urlink_text = ls_t706www_txt-ltxt.
          when 2.
             ls_travel_links-col2_urlink      = ls_t706www-urlink.
             ls_travel_links-col2_urlink_text = ls_t706www_txt-ltxt.
          when 3.
             ls_travel_links-col3_urlink      = ls_t706www-urlink.
             ls_travel_links-col3_urlink_text = ls_t706www_txt-ltxt.
       endcase.
    endloop.

    if ls_travel_links is not initial.
       append ls_travel_links to it_travel_links.
    endif.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ND_ESS_TRAVEL_REQ->GET_WBS_ELEMENTS
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_wbs_elements.

    DATA: wa_cost_assignments_wbs TYPE ty_cost_assignments_wbs.
    DATA: t_posid TYPE STANDARD TABLE OF /neptune/range_structure,
          t_psphi TYPE STANDARD TABLE OF /neptune/range_structure,
          t_verna TYPE STANDARD TABLE OF /neptune/range_structure,
          t_vernr TYPE STANDARD TABLE OF /neptune/range_structure,
          s_psphi TYPE /neptune/range_structure,
          s_posid TYPE /neptune/range_structure,
          s_vernr TYPE /neptune/range_structure,
          s_verna TYPE /neptune/range_structure.


    READ TABLE it_empinfo INTO wa_empinfo INDEX 1.
    IF sy-subrc EQ 0.
      SELECT pspnr posid post1 psphi vernr verna FROM prps INTO TABLE
       it_cost_assignments_wbs
       UP TO 300 ROWS
       WHERE pbukr EQ wa_empinfo-comp_code.
*        AND posid IN t_posid
*        AND psphi IN t_psphi
*        AND vernr IN t_vernr
*        AND verna IN t_verna.
    ELSE.
      IF search_cost_assignments_wbs-posid IS NOT INITIAL.
        s_posid-sign = 'I'.
        s_posid-option = 'EQ'.
        s_posid-low = search_cost_assignments_wbs-posid.
        APPEND s_posid TO t_posid.
        CLEAR s_posid.
      ENDIF.

      IF search_cost_assignments_wbs-psphi IS NOT INITIAL.
        s_psphi-sign = 'I'.
        s_psphi-option = 'EQ'.
        s_psphi-low = search_cost_assignments_wbs-posid.
        APPEND s_psphi TO t_psphi.
        CLEAR s_psphi.
      ENDIF.

      IF search_cost_assignments_wbs-vernr IS NOT INITIAL.
        s_vernr-sign = 'I'.
        s_vernr-option = 'EQ'.
        s_vernr-low = search_cost_assignments_wbs-vernr.
        APPEND s_vernr TO t_vernr.
        CLEAR s_vernr.
      ENDIF.

      IF search_cost_assignments_wbs-verna IS NOT INITIAL .
        s_verna-sign = 'I'.
        s_verna-option = 'EQ'.
        s_verna-low = search_cost_assignments_wbs-verna.
        APPEND s_verna TO t_verna.
        CLEAR s_verna.
      ENDIF.


      SELECT pspnr posid post1 psphi vernr verna FROM prps INTO TABLE
        it_cost_assignments_wbs
        UP TO search_cost_assignments_wbs-n_entries ROWS
        WHERE pbukr EQ '1000' "wa_empinfo-comp_code
        AND posid IN t_posid
        AND psphi IN t_psphi
        AND vernr IN t_vernr
        AND verna IN t_verna.

      LOOP AT  it_cost_assignments_wbs INTO  wa_cost_assignments_wbs.
        CONCATENATE wa_cost_assignments_wbs-posid wa_cost_assignments_wbs-post1 INTO
        wa_cost_assignments_wbs-filter.
        MODIFY it_cost_assignments_wbs FROM wa_cost_assignments_wbs.
      ENDLOOP.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ND_ESS_TRAVEL_REQ->ON_SELECT_LISTITEM
* +-------------------------------------------------------------------------------------------------+
* | [--->] AJAX_VALUE                     TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD on_select_listitem.

    DATA: it_perio       TYPE STANDARD TABLE OF ptp42,
          it_head        TYPE STANDARD TABLE OF ptp02,
          lv_t706t       TYPE t706t,
          wa_head        LIKE LINE OF it_head,
          wa_perio       LIKE LINE OF it_perio,
          wa_trip_schema LIKE LINE OF it_trip_schema,
          wa_travel_list LIKE LINE OF it_travel_list,
          lv_date        TYPE sy-datum.

    DATA: it_loc_addinfo       TYPE STANDARD TABLE OF bapitraddi,
          it_loc_cost          TYPE STANDARD TABLE OF ptrv_web_costdist_ext,
          it_loc_stopover      TYPE STANDARD TABLE OF ptrv_web_itinerary_ext,
          it_loc_transport     TYPE STANDARD TABLE OF bapitrvtrn,
          it_loc_deductions    TYPE STANDARD TABLE OF bapitrvded,
          it_loc_costdist_stop TYPE STANDARD TABLE OF bapitrvcos,
          it_loc_amounts       TYPE STANDARD TABLE OF bapitrvsum,
*          it_loc_attachments   TYPE STANDARD TABLE OF ptrv_bapi_attachments,
          it_loc_employee_data TYPE STANDARD TABLE OF bapitrvemp,
          wa_loc_cost          TYPE ptrv_web_costdist_ext,
          wa_loc_stopover      TYPE ptrv_web_itinerary_ext,
          wa_loc_addinfo       LIKE LINE OF it_loc_addinfo,
          wa_loc_receipts      TYPE bapitrvreo,
          wa_loc_costdist_stop TYPE bapitrvcos,
          wa_loc_amounts       TYPE  bapitrvsum,
*          wa_cost         LIKE LINE OF it_cost,
          lv_framedata         TYPE bapitrmain,
          lv_text_key          TYPE string,
          lv_travel_head       LIKE LINE OF it_travel_head,
          lv_status            TYPE bapitrstao,
          wa_text              LIKE LINE OF it_text,
          lv_attachment_key    TYPE srgbtbrel-instid_a.



    DATA: lv_reinr TYPE reinr,
          lv_data  TYPE ptrv_web_general_data_ext.


    CALL METHOD get_employee_number( ).

*Check whether it's newly created trip or trip selected from master list
    IF ajax_value IS NOT INITIAL.
      lv_reinr = ajax_value.
    ENDIF.

    CLEAR wa_travel_head.

*Get Additional details - employee Info, comments..etc
    CALL FUNCTION 'BAPI_TRIP_GET_DETAILS'
      EXPORTING
        employeenumber = gv_pernr
        tripnumber     = lv_reinr
        language       = sy-langu
      IMPORTING
        framedata      = lv_framedata
        status         = lv_status
      TABLES
*       receipts       = it_loc_receipts
*       addinfo        = it_loc_addinfo
        text           = it_text
        amounts        = it_loc_amounts
        emp_info       = it_loc_employee_data.

    MOVE-CORRESPONDING lv_framedata TO wa_travel_head.

    READ TABLE it_travel_list INTO wa_travel_list WITH KEY reinr = lv_reinr.
    MOVE-CORRESPONDING wa_travel_list TO wa_travel_head.

    lv_status-appr_txt = wa_travel_head-status_txt.
    lv_status-acc_text = wa_travel_head-status_txt1.

* Add user defined field
    SELECT SINGLE zzuserdef INTO wa_travel_head-user_defined
      FROM zptrv_userdef WHERE pernr  = gv_pernr
                      AND  reinr = lv_reinr.

*Get Attachments
    CONCATENATE gv_pernr lv_reinr INTO  lv_attachment_key.

    CALL METHOD me->get_attachments
      EXPORTING
        lv_instid_a = lv_attachment_key
        lv_reinr    = lv_reinr.

*Build Comment
    LOOP AT it_text INTO wa_text WHERE textid EQ 'TEXT'.
      REPLACE ALL OCCURRENCES OF '~' IN wa_text-textline WITH ''.
      CONCATENATE wa_travel_head-editor
                  wa_text-textline
                  cl_abap_char_utilities=>newline
                  INTO wa_travel_head-editor.
    ENDLOOP.

*Additional Destinations
    CALL FUNCTION 'PTRA_WEB_ITINERARY_GET'
      EXPORTING
        i_employeenumber = gv_pernr
        i_tripnumber     = lv_reinr
        i_periodnumber   = wa_travel_list-perio
        i_periodversion  = wa_travel_list-pdvrs
        i_language       = sy-langu
        i_trip_action    = 'MOD'
      IMPORTING
        et_itinerary     = it_loc_stopover
      TABLES
        et_return        = it_return.

    LOOP AT it_loc_stopover INTO wa_loc_stopover. "Seperating Default Display only Entries( marked with Indicator X) in Additional destinations
      IF wa_loc_stopover-display_only NE 'X'.
        MOVE-CORRESPONDING wa_loc_stopover TO wa_stopover.
        wa_stopover-reinr = lv_reinr.
        wa_stopover-act_text = wa_loc_stopover-t_actype_name.
        APPEND wa_stopover TO it_stopover.
        CLEAR  wa_stopover.
      ELSE. "Move Display only records in this IT.
        MOVE-CORRESPONDING wa_loc_stopover TO wa_stopover_i.
        APPEND wa_stopover_i TO it_stopover_i.
        CLEAR  wa_stopover_i.
      ENDIF.
    ENDLOOP.

*Cost Center Assignment for entire Trip
    CALL FUNCTION 'PTRA_WEB_COSTDIST_GET'
      EXPORTING
        i_employeenumber       = gv_pernr
        i_tripnumber           = lv_reinr
        i_periodnumber         = wa_travel_list-perio
        i_periodversion        = wa_travel_list-pdvrs
        i_language             = sy-langu
*       I_TRIP_SCHEMA          =
        i_trip_action          = 'MOD'
*       I_TRIP_COMPONENT       = ' '
        i_cost_assignment_type = 'T'
*       I_REF_KEY              =
      IMPORTING
        et_costdist            = it_loc_cost
      TABLES
        et_return              = it_return.

    LOOP AT it_loc_cost INTO wa_loc_cost. "Adding reinr in each row of cost assignement table
      wa_cost-reinr = lv_reinr.
      MOVE-CORRESPONDING wa_loc_cost TO wa_cost.
      APPEND wa_cost TO it_cost.
      CLEAR  wa_cost.
    ENDLOOP.

*Get HTML content Doc for Travel Request
    CALL METHOD me->get_travel_pdf
      EXPORTING
        l_pernr = gv_pernr
        l_reinr = wa_travel_head-reinr.

*Get Workflow Status Report
    CALL METHOD get_status_report( ).

    SORT it_cost BY reinr costdistno.
    SORT it_stopover BY  timedep.

    REFRESH:it_loc_addinfo,
           it_loc_stopover,
           it_loc_cost.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ND_ESS_TRAVEL_REQ->PERFORM_DEQUEUE
* +-------------------------------------------------------------------------------------------------+
* | [--->] L_REINR                        TYPE        REINR(optional)
* | [--->] L_PERNR                        TYPE        PERNR_D(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD perform_dequeue.
    CALL FUNCTION 'PTRM_WEB_CE_DEQUEUE_EPTRV'
      EXPORTING
*       MODE_PTRV_HEAD       = 'E'
        mandt = sy-mandt
        pernr = l_pernr
        reinr = l_reinr
*       X_PERNR              = ' '
*       X_REINR              = ' '
*       _SCOPE               = '3'
*       _SYNCHRON            = ' '
*       _COLLECT             = ' '
      .

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ND_ESS_TRAVEL_REQ->PERFORM_ENQUEUE
* +-------------------------------------------------------------------------------------------------+
* | [--->] AJAX_VALUE                     TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD perform_enqueue.

    CALL METHOD get_employee_number( ).

    DATA: lv_reinr TYPE reinr,
          subrc    TYPE sy-subrc.

    DATA: lv_msgid              TYPE msgid,
          lv_msgnr              TYPE msgnr,
          lv_msgv1              TYPE msgv1,
          lv_msgv2              TYPE msgv2,
          lv_msgv3              TYPE msgv3,
          l_message_text_output TYPE string.

    DATA:w_header     TYPE /neptune/lock_h,
         t_parameters TYPE STANDARD TABLE OF /neptune/lock_p,
         w_parameters TYPE /neptune/lock_p.

    DATA: m_code  TYPE string,
          m_type  TYPE string,
          m_title TYPE string,
          m_desc  TYPE string.

    lv_reinr = ajax_value.
*
*    w_header-function = 'PTRM_WEB_CE_ENQUEUE_EPTRV'.
*    w_header-process = 'E'.
*    w_header-obj_type = 'REINR'.
*    w_header-obj_key = lv_reinr.
*
*
*    w_parameters-name = 'REINR'.
*    w_parameters-type = 'PTRV_HEAD-REINR'.
*    w_parameters-value = lv_reinr.
*    APPEND  w_parameters TO t_parameters.
*    CLEAR w_parameters.
*
*
*
*    CALL FUNCTION '/NEPTUNE/REQUEST_LOCKING'
*      EXPORTING
*        wa_header       = w_header
*      IMPORTING
*        msg_code        = m_code
*        msg_type        = m_type
*        msg_title       = m_title
*        msg_description = m_desc
*      TABLES
*        it_parameters   = t_parameters.
*
*
*    wa_status-id = m_code.
**    wa_status-type = 'Error'.
*    wa_status-mss_text = 'Error'.
*    wa_status-message = m_desc.
*    APPEND wa_status TO it_status.
*    CLEAR wa_status.

    CALL FUNCTION 'PTRM_WEB_CE_ENQUEUE_EPTRV'
      EXPORTING
*       MODE_PTRV_HEAD = 'E'
        mandt          = sy-mandt
        pernr          = gv_pernr
        reinr          = lv_reinr
*       X_PERNR        = ' '
*       X_REINR        = ' '
*       _SCOPE         = '2'
*       _WAIT          = ' '
*       _COLLECT       = ' '
      EXCEPTIONS
        foreign_lock   = 1
        system_failure = 2
        error_occurred = 3
        OTHERS         = 4.

    IF sy-subrc EQ 1.  " 1
      lv_msgid = '56'.
      lv_msgnr = '393'.
      lv_msgv1 = gv_pernr.
      lv_msgv2 = sy-uname.
    ENDIF.

    IF sy-subrc EQ 4 AND sy-subrc NE 0.  "oTHERS - 2,3,4
      lv_msgid = 'RP'.
      lv_msgnr = '006'.
      lv_msgv1 = sy-subrc.
      lv_msgv2 = gv_pernr.
      lv_msgv3 = space.
    ENDIF.
    IF lv_msgid IS NOT INITIAL.
      CALL FUNCTION 'MESSAGE_TEXT_BUILD'
        EXPORTING
          msgid               = lv_msgid
          msgnr               = lv_msgnr
          msgv1               = lv_msgv1
          msgv2               = lv_msgv2
          msgv3               = lv_msgv3
*         MSGV4               = ' '
        IMPORTING
          message_text_output = l_message_text_output.


      wa_status-mss_text = 'Error'.
      wa_status-message = l_message_text_output.
      APPEND wa_status TO it_status.
      CLEAR wa_status.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ND_ESS_TRAVEL_REQ->SAVE_ATTACHMENTS
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD save_attachments.

    DATA: lv_folder_id      TYPE soodk,
          lv_object_id      TYPE soobjinfi1-object_id,
          lv_rolea          TYPE borident,
          lv_roleb          TYPE borident,
          lv_file_name(255) TYPE c,
          lv_file_type(9)   TYPE c,
          lv_length         TYPE i,
          lv_length_f       TYPE i,
          lv_length_e       TYPE i,
          lv_pre            TYPE string,
          lv_data           TYPE string,
          lv_datax          TYPE xstring,
          lv_doc_type       TYPE soodk-objtp,
          lv_doc_data       TYPE sodocchgi1,
          lv_doc_info       TYPE sofolenti1,
          lv_ajax_value     TYPE string,
          it_solix          TYPE STANDARD TABLE OF solix,
          it_header         TYPE STANDARD TABLE OF solisti1,
          wa_header         TYPE solisti1.


    DATA:it_return_attachments TYPE STANDARD TABLE OF bapiret2,
         lv_filename           TYPE string,
         wa_lporb              TYPE sibflporb,
         lv_content            TYPE xstring.


    CALL METHOD get_employee_number( ).

    LOOP AT it_attachment INTO wa_attachment WHERE content CS 'data:application/pdf;base64,'.

      SPLIT wa_attachment-content AT ',' INTO lv_pre
                                              lv_data.


**DECODE BASE64
      CALL FUNCTION 'SCMS_BASE64_DECODE_STR'
        EXPORTING
          input  = lv_data
*         UNESCAPE       = 'X'
        IMPORTING
          output = lv_content
        EXCEPTIONS
          failed = 1
          OTHERS = 2.


*      lv_content = wa_attachment-content.
      lv_filename = wa_attachment-docdes.
      wa_lporb-typeid = 'BUS2089'.
      CONCATENATE gv_pernr wa_attachment-reinr INTO wa_lporb-instid.


      CALL METHOD cl_fitv_gos=>save
        EXPORTING
          iv_name        = lv_filename
*         iv_content     =
          iv_content_hex = lv_content
          is_lporb       = wa_lporb
          iv_objtp       = 'EXT'
        RECEIVING
          rt_messages    = it_return_attachments.


      IF it_return_attachments IS NOT INITIAL.
        APPEND LINES OF it_return_attachments TO it_message_attachments.
      ENDIF.

    ENDLOOP.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ND_ESS_TRAVEL_REQ->SAVE_TRAVEL
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD save_travel.


    TYPES: BEGIN OF ty_text_tab,
             line(72) TYPE c,
           END OF ty_text_tab.

    DATA: it_text_tab TYPE STANDARD TABLE OF ty_text_tab,
          lv_text_id  TYPE string,
          lv_tabix    TYPE i,
*          wa_status   LIKE LINE OF it_status,
          wa_text     LIKE LINE OF it_text,
          wa_text_tab LIKE LINE OF it_text_tab.



    CALL METHOD get_employee_number( ).


    REFRESH it_status.

*Additional Destinations (StopOvers) - Adding itinerary data to stopover table
*    APPEND LINES OF it_stopover_i TO it_stopover.
*    SORT it_stopover BY datedep timedep.

    LOOP AT it_stopover INTO wa_stopover.
      "Adding empty space in key_stop so as to make it work wrt Webdynpro application.
      CONCATENATE space wa_stopover-key_stop INTO wa_stopover-key_stop SEPARATED BY space.
      MOVE-CORRESPONDING wa_stopover TO wa_stopover_ae.
      APPEND wa_stopover_ae TO it_stopover_ae.
      CLEAR wa_stopover_ae.

      w_ziel-zikey                  =  wa_stopover-key_stop.
      w_ziel-rvdat                 =  wa_stopover-datedep.
      w_ziel-rvuhr                 =  wa_stopover-timedep.
      w_ziel-kunde                 =  wa_stopover-customer.
      w_ziel-zort1                 =  wa_stopover-location.
      w_ziel-zland                 =  wa_stopover-country.
      w_ziel-rgion                 =  wa_stopover-region .
      w_ziel-kztkt                 =  wa_stopover-t_actype.
      w_ziel-plan_activity_type    =  wa_stopover-plan_activity_type .
      w_ziel-req_itinerary_number  =  wa_stopover-req_itinerary_number.
      w_ziel-protect               =  wa_stopover-coming_from_plan.
      w_ziel-cityadr               =  wa_stopover-cityadr.

      APPEND w_ziel TO lt_ziel.
      CLEAR w_ziel.
    ENDLOOP.

* Trip CostCenters
    LOOP AT it_cost INTO wa_cost.
      MOVE-CORRESPONDING wa_cost TO wa_cost_ae.
      wa_cost_ae-cdt_number = wa_cost-costdistno.
      APPEND wa_cost_ae TO it_cost_ae.
      CLEAR wa_cost_ae.
    ENDLOOP.


    lv_reinr = wa_travel_head-reinr.

    APPEND wa_travel_head TO it_travel_head_out.

    LOOP AT it_travel_head_out INTO wa_travel_head WHERE update IS NOT INITIAL.
*        Change or Create
      CASE wa_travel_head-update.

        WHEN 'I' OR 'U'.
          CALL METHOD save_travel_create( ).

        WHEN 'D'.
          CALL METHOD cancel_trip( ).

      ENDCASE.

*      call method save_attachments( ) .
    ENDLOOP.



  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ND_ESS_TRAVEL_REQ->SAVE_TRAVEL_CREATE
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD save_travel_create.


    DATA: it_loc_cost         TYPE STANDARD TABLE OF ptrv_web_costdist_trip_ext,
          it_loc_stopover     TYPE STANDARD TABLE OF ptrv_web_itinerary_ext,
          it_loc_transport    TYPE STANDARD TABLE OF glo_ptrv_web_transport_ext,
          it_loc_deductions   TYPE STANDARD TABLE OF ptrv_web_deductions_ext,
          lv_loc_text         TYPE string,
          wa_loc_cost         TYPE ptrv_web_costdist_trip_ext,
          wa_loc_stopover     TYPE ptrv_web_itinerary_ext,
          wa_loc_transport    TYPE glo_ptrv_web_transport_ext,
          wa_loc_deductions   TYPE ptrv_web_deductions_ext,
          wa_loc_general_data TYPE ptrv_web_general_data_ext.


    DATA: it_return         TYPE bapirettab,
          lv_generaldata    TYPE ptrv_web_general_data_int,
          out_tripnumber    TYPE bapitrip-tripno,
          lv_generaldata_e  TYPE ptrv_web_general_data_ext,
          out_periodnumber  TYPE bapitrvxxx-period,
          out_periodversion TYPE ptrv_perio-pdvrs,
          lv_trip_action    TYPE ptrv_trip_action.

    DATA: it_return_c TYPE STANDARD TABLE OF bapiret2,
          it_return_a TYPE STANDARD TABLE OF bapiret2,
          wa_return_c TYPE bapiret2,
          wa_return_a TYPE bapiret2.
    DATA: gs_userdef         TYPE zptrv_userdef,
          lv_userdefined     TYPE zzuserdefc,
          lv_check_indicator TYPE wdy_boolean.

    DATA: wi_head TYPE head_perio.
    wi_head-mandt = sy-mandt.
    wi_head-pernr = gv_pernr.
    wi_head-reinr = wa_travel_head-reinr.

    REFRESH it_return.


*Insert (INS) or Edit (MOD) Mode
    IF wa_travel_head-update EQ 'I'.
      lv_trip_action = 'INS'.
    ELSE.
      lv_trip_action = 'MOD'.
    ENDIF.
    MOVE-CORRESPONDING wa_travel_head TO lv_generaldata.
    lv_userdefined = wa_travel_head-user_defined.  "Storing userdefined value in variable for later use.

*Radiobutton options on SAVE - Save as draft or submit to approver
    IF wa_save_options-select_draft EQ 'true'.
      lv_generaldata-settl_status = '0'.  "OPEN - draft
      lv_generaldata-appvl_status = '5'.   "Request Awaiting Documents
*      lv_check_indicator = 'X'.
    ENDIF.

    IF wa_save_options-select_approved EQ 'true'.
      lv_generaldata-settl_status = '1'.  "Submit to Approver
      lv_generaldata-appvl_status = '1'.   "Request Recorded
*      lv_check_indicator = ''.
    ENDIF.

    lv_generaldata-plan_activity_type = lv_generaldata-t_actype.

    DATA: lv TYPE string.

*    CONCATENATE cl_abap_char_utilities=>CR_LF
*               cl_abap_char_utilities=>CR_LF
*               INTO lv.

    REPLACE ALL OCCURRENCES OF cl_abap_char_utilities=>newline IN lv_generaldata-editor WITH cl_abap_char_utilities=>cr_lf.

    MOVE-CORRESPONDING lv_generaldata TO lv_generaldata_e.

**Memory Update
    CALL FUNCTION 'PTRA_SCREEN_MEM_TRIP_SAVE'
      EXPORTING
        i_employeenumber = gv_pernr
        i_tripnumber     = wa_travel_head-reinr
        i_periodnumber   = wa_travel_head-perio
        i_periodversion  = wa_travel_head-pdvrs
        i_general_data   = lv_generaldata_e
*       IT_ADVANCES      =
        it_itinerary     = it_stopover_ae
*       IT_DEDUCTIONS    =
*       IT_TRANSPORT     =
        it_costdist_trip = it_cost_ae
*       IT_COSTDIST_ITIN =
*       IT_HISTORY       =
*       I_ITEMIZATION_SUMS       =
*       I_CURRENT_VERSION        =
*       IT_REQ_TAC       =
*       IT_REQ_ESTC      =
*       I_FM_POSTING_DATE        =
      .

*Additional FM to update Memory in order to make Travel request application work
*    wi_head-kztkt = wa_travel_head-t_actype.
    CALL FUNCTION 'PTRA_UTIL_MEM_TRIP_SAVE'
      EXPORTING
        i_head  = wi_head
        it_ziel = lt_ziel.
*        it_ABZUG =


*Delete cost assignments for Trip
    IF it_costassi_delete IS NOT INITIAL .
      CALL FUNCTION 'PTRA_WEB_COSTDIST_DELETE'
        EXPORTING
          i_employeenumber       = gv_pernr
          i_tripnumber           = wa_travel_head-reinr
          i_periodnumber         = wa_travel_head-perio
          i_periodversion        = wa_travel_head-pdvrs
          i_no_memory_update     = ' '
          i_trip_component       = 'R'
          i_language             = sy-langu
          it_costdist            = it_costassi_delete
          i_cost_assignment_type = 'T'
        TABLES
          et_return              = it_return_c.
      LOOP AT it_return_c INTO wa_return_c.
        CONCATENATE 'COST TRIP DELETE' wa_return_c-message
        INTO wa_return_c-message SEPARATED BY space.
        MODIFY it_return_c FROM wa_return_c INDEX sy-tabix.
      ENDLOOP.
    ENDIF.

*Delete Additional Destinations
    IF it_stopover_delete IS NOT INITIAL.
      CALL FUNCTION 'PTRA_WEB_ITINERARY_DELETE'
        EXPORTING
          i_employeenumber       = gv_pernr
          i_tripnumber           = wa_travel_head-reinr
          i_periodnumber         = wa_travel_head-perio
          i_periodversion        = wa_travel_head-pdvrs
          i_no_memory_update     = ' '
          i_language             = sy-langu
          i_trip_component       = 'R'
          it_itinerary_to_delete = it_stopover_delete
*       IMPORTING
*         E_ITINERARY_DEFAULT    =
        TABLES
          et_return              = it_return_a.
      LOOP AT it_return_a INTO wa_return_a.
        CONCATENATE 'DESTINATIONS DELETE' wa_return_a-message
        INTO wa_return_a-message SEPARATED BY space.
        MODIFY it_return_a FROM wa_return_a INDEX sy-tabix.
      ENDLOOP.
    ENDIF.


*--------------------------------------------------------------------*
*Final Save
    CALL FUNCTION 'PTRA_WEB_EXPENSE_REPORT_SAVE_2'
      EXPORTING
        i_employeenumber      = gv_pernr
        i_tripnumber          = wa_travel_head-reinr
        i_periodnumber        = wa_travel_head-perio
        i_periodversion       = wa_travel_head-pdvrs
        i_trip_action         = lv_trip_action
        i_trip_component      = 'R'            "Travel Request Indicator
*       I_TRIP_APPLICATION    =
        i_language            = sy-langu
        i_general_data        = lv_generaldata
        iv_save_without_check = space       "X = save as draft
        i_fm_posting_date     = sy-datum
        iv_always_check       = 'X'
      IMPORTING
        e_tripnumber          = out_tripnumber
        e_periodnumber        = out_periodnumber
        e_periodversion       = out_periodversion
        e_general_data        = wa_loc_general_data
        e_editor              = lv_loc_text
*       et_receipts           = it_loc_receipts
*       ET_ADVANCES           =
*       et_mileage            = it_loc_mileage
        et_itinerary          = it_loc_stopover
        et_deductions         = it_loc_deductions
        et_transport          = it_loc_transport
        et_costdist_trip      = it_loc_cost
*       ET_COSTDIST_ITIN      =
*       et_costdist_rece      = it_loc_costdist_rece
*       et_costdist_mile      = it_loc_costdist_mile
*       ET_HISTORY            =
*       E_REQ_DOCUMENT        =
*       ET_REQ_SERVICE        =
*       ET_REQ_TAC            =
*       ET_REQ_ESTC           =
*       EV_SAVED_SUCCESSFUL   =
*       E_FM_POSTING_DATE     =
      TABLES
        et_return             = it_return.



    READ TABLE it_return INTO wa_return WITH KEY type = 'E'.
    IF sy-subrc NE 0.
**Update Front-end Data

      CALL METHOD save_attachments( ).
      REFRESH: it_cost,
               it_stopover,
               it_attachment.

      MOVE-CORRESPONDING wa_loc_general_data TO wa_travel_head.
      wa_travel_head-reinr = out_tripnumber.
      lv_reinr = out_tripnumber.

      IF lv_userdefined IS NOT INITIAL.
        gs_userdef-pernr = gv_pernr.
        gs_userdef-reinr = lv_reinr.
        gs_userdef-zzuserdef = lv_userdefined.
        IF  lv_trip_action EQ 'INS'.
          INSERT zptrv_userdef FROM gs_userdef.
        ELSE.
          MODIFY zptrv_userdef FROM gs_userdef.
        ENDIF.
        COMMIT WORK.
      ENDIF.

*Seperating Default Display only Entries( marked with Indicator X )
      LOOP AT it_loc_stopover INTO wa_loc_stopover.
        IF wa_loc_stopover-display_only NE 'X'.
          MOVE-CORRESPONDING wa_loc_stopover TO wa_stopover.
          wa_stopover-reinr = out_tripnumber.
          wa_stopover-new_record = ''.
          APPEND wa_stopover TO it_stopover.
          CLEAR  wa_stopover.
        ENDIF.
      ENDLOOP.

*Cost Center Assignment for entire Trip
      LOOP AT it_loc_cost INTO wa_loc_cost.
        wa_cost-reinr = out_tripnumber.
        MOVE-CORRESPONDING wa_loc_cost TO wa_cost.
        wa_cost-costdistno = wa_loc_cost-cdt_number.
        wa_cost-new_record = ''.
        APPEND wa_cost TO it_cost.
        CLEAR  wa_cost.
      ENDLOOP.

      DATA: lv_instid_a TYPE sibfboriid,
            lv_reinr1   TYPE reinr.

*GET attachments
      IF out_tripnumber IS NOT INITIAL OR out_tripnumber NE '0000000000'.
        lv_reinr1 = out_tripnumber.
        CONCATENATE gv_pernr lv_reinr1  INTO lv_instid_a.
        CALL METHOD me->get_attachments
          EXPORTING
            lv_instid_a = lv_instid_a
            lv_reinr    = lv_reinr1
*           server      =
          .
      ENDIF.


* Travel PDF

      CALL METHOD me->get_travel_pdf
        EXPORTING
          l_pernr = gv_pernr
          l_reinr = out_tripnumber.

*   Launch Travel Request Workflow if submitted for approval

      DATA:  lv_objtype TYPE swotobjid-objtype,
             lv_objkey  TYPE swotobjid-objkey,
             lv_event   TYPE swetypecou-event.

      IF wa_save_options-select_approved EQ 'true'.
        lv_objtype = 'BUS2089'.
        lv_event   = 'ZRequestReleased'.
        CONCATENATE gv_pernr wa_travel_head-reinr INTO lv_objkey.
        CALL FUNCTION 'Z_WF_LAUNCH_EVENT'
          EXPORTING
            i_objtype        = lv_objtype
            i_objkey         = lv_objkey
            i_event          = lv_event
          EXCEPTIONS
            failed_to_launch = 1
            OTHERS           = 2.
        IF sy-subrc <> 0.
*            Implement suitable error handling here
        ENDIF.
      ENDIF.


      CALL METHOD perform_dequeue( ).
      REFRESH:it_costassi_delete,
              it_stopover_delete.

    ENDIF.

*Create Messages
    APPEND LINES OF it_message_attachments TO it_return.
    APPEND LINES OF it_return_c TO it_return.
    APPEND LINES OF it_return_a TO it_return.


    LOOP AT it_return INTO wa_return.
      wa_status-message = wa_return-message.
      CASE wa_return-type .
        WHEN 'S' .
          wa_status-mss_text = 'Success'.
        WHEN 'I'.
          wa_status-mss_text = 'Information'.
        WHEN 'W'.
          wa_status-mss_text = 'Warning'.
        WHEN 'E'.
          wa_status-mss_text = 'Error'.
        WHEN 'A'.
          wa_status-mss_text = 'Warning'.

          CONCATENATE 'ABORTED - ' wa_status-message
          INTO wa_status-message SEPARATED BY space.

        WHEN OTHERS.
          wa_status-mss_text = 'None'.
      ENDCASE.

      APPEND wa_status TO it_status.
      CLEAR wa_status.
    ENDLOOP.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ND_ESS_TRAVEL_REQ->USER_PARAMETERS
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD user_parameters.


    DATA:  lo_bus1065               TYPE obj_record,  "Employee bus object reference
           lo_usr01                 TYPE obj_record,
           lv_person_name           TYPE pa0001-ename,
           lv_person_email(40)      TYPE c,
           lv_check_role1           TYPE agr_name,
           user_has_display_only(1) TYPE c,
           lv_comp_code             TYPE bukrs.

    TYPES: BEGIN OF ty_attachments_checks,
             pernr               TYPE pa0001-pernr,
             approvername        TYPE pa0001-ename,
             ename               TYPE pa0001-ename,
             email(40)           TYPE c,
             att_create_auth(1)  TYPE c,
             att_display_auth(1) TYPE c,
             att_change_auth(1)  TYPE c,
             att_delete_auth(1)  TYPE c,
           END OF ty_attachments_checks.

    DATA: attachment_checks TYPE ty_attachments_checks.
    INCLUDE <swfcntn01>.

    CALL METHOD get_employee_number( ).


*check for travel attachment authorizations
    swf_create_object lo_bus1065 'BUS1065' gv_pernr.
    swf_get_property lo_bus1065 'ZUSER' lo_usr01.
    swf_get_property lo_usr01   'SMTPAddress' lv_person_email.
    swf_get_property lo_bus1065 'NAME' lv_person_name.
    swf_get_property lo_bus1065 'COMPANYCODE' lv_comp_code.

    attachment_checks-pernr = gv_pernr.
    attachment_checks-approvername = lv_approver_name.
    attachment_checks-ename = lv_person_name.
    attachment_checks-email = lv_person_email.

*  Populate custom attachment authorities
*  Set create authority
    AUTHORITY-CHECK OBJECT 'ZGOSOBJECT'
      ID 'GOSOBJTYPE' FIELD 'BUS2089'
      ID 'ACTVT'      FIELD '01'
      ID 'ZZ_AUTH'    DUMMY.
    IF sy-subrc = 0.
      attachment_checks-att_create_auth = 'T'.
    ELSE.
      attachment_checks-att_create_auth = 'F'.
    ENDIF.

*  Set display/export authority
    AUTHORITY-CHECK OBJECT 'ZGOSOBJECT'
      ID 'GOSOBJTYPE' FIELD 'BUS2089'
      ID 'ACTVT'      FIELD '03'
      ID 'ZZ_AUTH'    FIELD '*'.      "Full authorization
    IF sy-subrc = 0.
      attachment_checks-att_display_auth = 'T'.
    ELSE.
      AUTHORITY-CHECK OBJECT 'ZGOSOBJECT'
      ID 'GOSOBJTYPE' FIELD 'BUS2089'
      ID 'ACTVT'      FIELD '03'
      ID 'ZZ_AUTH'    FIELD 'O'.
      IF sy-subrc = 0.
        attachment_checks-att_display_auth = 'O'.
      ELSE.
        attachment_checks-att_display_auth = 'F'.
      ENDIF.
    ENDIF.

*  Set delete authority
    AUTHORITY-CHECK OBJECT 'ZGOSOBJECT'
      ID 'GOSOBJTYPE' FIELD 'BUS2089'
      ID 'ACTVT'      FIELD '06'
      ID 'ZZ_AUTH'    FIELD '*'.
    IF sy-subrc = 0.
      attachment_checks-att_display_auth = 'T'.
    ELSE.
      AUTHORITY-CHECK OBJECT 'ZGOSOBJECT'
      ID 'GOSOBJTYPE' FIELD 'BUS2089'
      ID 'ACTVT'      FIELD '06'
      ID 'ZZ_AUTH'    FIELD 'O'.
      IF sy-subrc = 0.
        attachment_checks-att_delete_auth = 'O'.
      ELSE.
        attachment_checks-att_delete_auth = 'F'.
      ENDIF.
    ENDIF.



*    Check For 'Display Only' Authorization for the trip
    SELECT SINGLE agr_name FROM agr_users INTO lv_check_role1
      WHERE uname EQ sy-uname
      AND from_dat LE sy-datum
      AND to_dat GE sy-datum
      AND agr_name EQ 'HR_ESS_SEPARATED'.

    IF sy-subrc EQ 0 .
      gv_parameters-display_only_role = 'X'.
    ELSE.
      gv_parameters-display_only_role = ''.
    ENDIF.

    gv_parameters-pernr = gv_pernr.
    gv_parameters-att_create_auth = attachment_checks-att_create_auth.
    gv_parameters-att_display_auth =   attachment_checks-att_display_auth.
    gv_parameters-att_delete_auth  = attachment_checks-att_delete_auth.
    gv_parameters-approvername = lv_approver_name.
    gv_parameters-comp_code = lv_comp_code.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ND_ESS_TRAVEL_REQ->VALIDATE_COST_ASSIGN
* +-------------------------------------------------------------------------------------------------+
* | [--->] SERVER                         TYPE REF TO /NEPTUNE/CL_NAD_SERVER
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD validate_cost_assign.
    DATA: repeated_record(1) TYPE c,
          wa_message         TYPE /neptune/message,
          p_cobl             TYPE cobl_ex,
          it_return_cobl     TYPE STANDARD TABLE OF bapireturn1,
          wa_return_cobl     TYPE bapireturn1,
          lv_message         TYPE string.


*Check whether costcenter/WBS is locked or not
    p_cobl-budat = sy-datum.
    p_cobl-vorgn = 'TRVL'.
    p_cobl-glvor = 'RFBU'.
    p_cobl-awtyp = 'TRAVL'.
    p_cobl-bukrs = gv_parameters-comp_code.
    p_cobl-pernr = gv_parameters-pernr.

    IF wa_cost-costcenter IS NOT INITIAL.
      p_cobl-kostl = wa_cost-costcenter.
    ENDIF.

    IF wa_cost-wbs_elemt IS NOT INITIAL.
      p_cobl-ps_posid = wa_cost-wbs_elemt.
    ENDIF.

    CALL FUNCTION 'HRCA_COBL_CHECK'
      EXPORTING
        i_cobl        = p_cobl
      TABLES
        cobl_messages = it_return_cobl.


    IF it_return_cobl IS NOT INITIAL.
      LOOP AT it_return_cobl INTO wa_return_cobl.
        CONCATENATE  wa_return_cobl-message
                    lv_message
                    INTO lv_message SEPARATED BY ', '.
      ENDLOOP.
      wa_message-field_name = 'costMessage'.
      wa_message-type = 'E'.
      wa_message-message = lv_message.
      CALL METHOD server->api_message_create
        EXPORTING
          message = wa_message.
      RETURN.
    ENDIF.

*    Check whether costcenter/wbs exists and get its Text
    IF wa_cost-costcenter IS NOT INITIAL.
      CLEAR: wa_cost-costcenter_name,
             wa_cost-wbs_elemt,
             wa_cost-wbs_elemt_name.

      SELECT SINGLE ktext FROM cskt INTO
        wa_cost-costcenter_name WHERE
        kostl EQ wa_cost-costcenter
        AND spras EQ sy-langu.
    ENDIF.

    IF wa_cost-wbs_elemt IS NOT INITIAL.
      CLEAR: wa_cost-costcenter,
             wa_cost-costcenter_name,
             wa_cost-wbs_elemt_name.

      SELECT SINGLE post1 FROM prps
        INTO wa_cost-wbs_elemt_name WHERE
        posid EQ wa_cost-wbs_elemt.
    ENDIF.
  ENDMETHOD.
ENDCLASS.