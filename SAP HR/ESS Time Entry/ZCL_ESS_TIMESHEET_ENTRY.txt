CLASS zcl_ess_timesheet_entry DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
    INTERFACES /neptune/if_nad_server .
    INTERFACES if_badi_interface .
    INTERFACES if_hress_cats_print_form .

    TYPES:
      BEGIN OF ty_calendar,
        date TYPE dats,
        type TYPE string,
      END OF ty_calendar .
    TYPES:
      BEGIN OF ty_entry,
        counter          TYPE catscounte,
        uuid             TYPE string,
        workdate         TYPE catsdate,
        employeenumber   TYPE hr_pernr,
        shorttext        TYPE ltxa1,
        network          TYPE nw_aufnr,
        acttype          TYPE lstar,
        avtivity         TYPE vornr,
        wbs_element      TYPE ps_posid,
        abs_att_type     TYPE awart,
        wagetype         TYPE lgart,
        rec_cctr         TYPE ekostl,
        rec_order        TYPE eaufnr,
        recsaleord       TYPE ekdau,
        recitem          TYPE ekdpo,
        catshours        TYPE catshours,
        unit             TYPE meinh,
        starttime        TYPE beguz,
        endtime          TYPE enduz,
        status           TYPE catsstatus,
        reason           TYPE catsreason,
        quantity         TYPE catsnumber,
        unitq            TYPE msehi,
        abs_att_type_txt TYPE string,
        wagetype_txt     TYPE string,
        hours_changed    TYPE string,
        activity_txt     TYPE string,
        cocntr_txt       TYPE string,
        iorder_txt       TYPE string,
        wbs_txt          TYPE string,
        network_txt      TYPE string,
        avtivity_txt     TYPE string,
        sales_order_txt  TYPE string,
        selected         TYPE string,
        show_hours       TYPE string,
        show_clock       TYPE string,
        status_state     TYPE string,
        status_text      TYPE string,
        bonustype        TYPE t510t-prakn,
        bonustype_txt    TYPE t510t-ptext,
        pln01            TYPE plans,
        zzapproverid     TYPE zzapproverid,
        zzapprovername   TYPE zzapprovername,
        zzpositiontext   TYPE stext,
        sobid            TYPE sobid,
        zzorgunittext    TYPE orgtx,
        zzcostobjtext    TYPE char40,
*         costobj type p9027-kst01,
        dname            TYPE string,  "  To get Day name for particular date
        bedit            TYPE string,
        bdel             TYPE string,
        badd             TYPE string,
        fieldst          TYPE string,  "Field State whether enabled/disabled
*         fieldst1 type string, " fIELD1 """"
        fieldcl          TYPE string, "Field Color for weekends
        commentcolor     TYPE string,
        disablehours     TYPE string,
        reasontext       TYPE tcatsdt-text,
        valuation_basis  TYPE catsdb-bwgrl,
        extra_pay_indic  TYPE catsdb-aufkz,
        pay_text         TYPE string,
        cctr_wbs(24)     TYPE c,
        action_ind(1)    TYPE c,
      END OF ty_entry .
    TYPES:
*    types:
*    begin of ty_entry_cell,
*          counter          type catscounte,
*          uuid             type string,
*          workdate         type catsdate,
*          employeenumber   type hr_pernr,
*          shorttext        type ltxa1,
*          network          type nw_aufnr,
*          acttype          type lstar,
*          avtivity         type vornr,
*          wbs_element      type ps_posid,
*          abs_att_type     type awart,
*          wagetype         type lgart,
*          rec_cctr         type ekostl,
*          rec_order        type eaufnr,
*          recsaleord       type ekdau,
*          recitem          type ekdpo,
**          catshours        type catshours,
**           7 days of week
*          day1            type catscell,
*          day2            type catscell,
*          day3            type catscell,
*          day4            type catscell,
*          day5            type catscell,
*          day6            type catscell,
*          day7            type catscell,
**          End of day
*          beguz1          type catsbeguz,
*          beguz2          type catsbeguz,
*          beguz3          type catsbeguz,
*          beguz4          type catsbeguz,
*          beguz5          type catsbeguz,
*          beguz6          type catsbeguz,
*          beguz7          type catsbeguz,
*          enduz1          type catsenduz,
*          enduz2          type catsenduz,
*          enduz3          type catsenduz,
*          enduz4          type catsenduz,
*          enduz5          type catsenduz,
*          enduz6          type catsenduz,
*          enduz7          type catsenduz,
*          unit             type meinh,
*          starttime        type beguz,
*          endtime          type enduz,
*          status           type catsstatus,
*          reason           type catsreason,
*          quantity         type catsnumber,
*          unitq            type msehi,
*          abs_att_type_txt type string,
*          wagetype_txt     type string,
*          hours_changed    type string,
*          activity_txt     type string,
*          cocntr_txt       type string,
*          iorder_txt       type string,
*          wbs_txt          type string,
*          network_txt      type string,
*          avtivity_txt     type string,
*          sales_order_txt  type string,
*          selected         type string,
*          show_hours       type string,
*          show_clock       type string,
*          status_state     type string,
*          status_text      type string,
*          bonustype type prakn,
*          pln01 type plans,
*          zzapproverid type zzapproverid,
*          zzapprovername type zzapprovername,
*          zzpositiontext type stext,
*          sobid type sobid,
*          zzorgunittext type orgtx,
*          zzcostobjtext type char40,
**         costobj type p9027-kst01,
*          dname type string,  "  To get Day name for particular date
*          bedit type string,
*          bdel type string,
*          badd type string,
*          fieldst type string,  "Field State whether enabled/disabled
**         fieldst1 type string, " fIELD1 """"
*          fieldcl type string, "Field Color for weekends
*          commentcolor type string,
*    end of ty_entry_cell .
      BEGIN OF ty_profile_data,
        variant         TYPE catsvarian,
        show_hours      TYPE string,
        show_clock      TYPE string,
        pernr           TYPE pa0001-pernr,
        persg           TYPE pa0001-persg,
        persk           TYPE pa0001-persk,
        sname           TYPE pa0001-sname,
        ptype           TYPE string,
        schkz           TYPE pa0007-schkz,
        zterf           TYPE pa0007-zterf,
        a_timeclerk(1)  TYPE c,
        lv_global       TYPE pa0001-pernr,
        needworklist(1) TYPE c,
        ess_time_type   TYPE string,
        lower_date      TYPE sy-datum,
        upper_date      TYPE sy-datum,
      END OF ty_profile_data .
    TYPES:
      BEGIN OF ty_sales_order,
        vbeln TYPE vbeln,
        posnr TYPE posnr,
        arktx TYPE string,
      END OF ty_sales_order .
    TYPES:
      BEGIN OF ty_operation,
        avtivity    TYPE string,
        description TYPE string,
      END OF ty_operation .
    TYPES:
      BEGIN OF ty_wbs,
        poski TYPE ps_poski,
        posid TYPE ps_matchcd,
        postu TYPE ps_postu,
        post1 TYPE ps_post1,
      END OF ty_wbs .
    TYPES:
      BEGIN OF ty_iorder,
        aufnr TYPE aufnr,
        ktext TYPE auftext,
        kostv TYPE aufkostv,
      END OF ty_iorder .
    TYPES:
      BEGIN OF ty_favorites,
        records          TYPE int4,
*        network          TYPE nw_aufnr,
        acttype          TYPE lstar,
*        avtivity         TYPE vornr,
        wbs_element      TYPE ps_posid,
        abs_att_type     TYPE awart,
        wagetype         TYPE lgart,
        rec_order        TYPE eaufnr,
        abs_att_type_txt TYPE string,
        wagetype_txt     TYPE string,
        activity_txt     TYPE string,
*        iorder_txt       TYPE string,
        wbs_txt          TYPE string,
        cocntr_txt       TYPE string,
        rec_cctr         TYPE string,
        starttime        TYPE beguz,
        endtime          TYPE enduz,
*        network_txt      TYPE string,
        avtivity_txt     TYPE string,
*        sales_order_txt  TYPE string,
        filter           TYPE string,
      END OF ty_favorites .
    TYPES:
      BEGIN OF ty_settings,
        variant            TYPE catsvarian,
        cal_firstdayoffset TYPE string,
        cal_setsinglerow   TYPE string,
        cal_showlegend     TYPE string,
        pernr              TYPE catsdb-pernr,
      END OF ty_settings .
    TYPES:
      BEGIN OF ty_page_calendar,
        count_all       TYPE int4,
        count_approve   TYPE int4,
        count_release   TYPE int4,
        count_unrelease TYPE int4,
        count_reject    TYPE int4,
      END OF ty_page_calendar .
    TYPES:
*   Declaration for Worklist Functionality
      BEGIN OF ty_worklist,
        pln01           TYPE p9027-pln01,
        zzapproverid    TYPE zzapproverid,
        zzapprovername  TYPE zzapprovername,
        zzpositiontext  TYPE stext,
        sobid           TYPE sobid,
        zzorgunittext   TYPE orgtx,
        zzcostobjtext   TYPE char40,
        rec_cctr        TYPE p9027-kst01,
        needworklist(1) TYPE c,
      END OF ty_worklist .
    TYPES:
      BEGIN OF ty_form_input,
        iv_begda TYPE datum,
        iv_endda TYPE datum,
      END OF ty_form_input .
    TYPES:
      BEGIN OF ty_pdfdata,
        pdf      TYPE string,
        iv_begda TYPE datum,
        iv_endda TYPE datum,
        pernr    TYPE hr_pernr,
      END OF ty_pdfdata .
*  types:
*    begin of ty_lrq,
*      pernr type pa2001-pernr,
*      subty type pa2001-subty,
*      endda type pa2001-endda,
*      begda type pa2001-begda,
*      awart type pa2001-awart,
*      stdaz type pa2001-stdaz,
*      end of ty_lrq .
    TYPES:    BEGIN OF ty_premn,
                pernr  TYPE char8,
                prntx  TYPE char50,
*        prntx  type char50,
                filter TYPE string,
              END OF ty_premn .
    TYPES:BEGIN OF ty_pernr,
            pernr    TYPE persno,
            prof     TYPE catsvarian,
            timetype TYPE zcatsvarian,
          END OF ty_pernr .
    TYPES:
      BEGIN OF ty_premium,
        prakn    TYPE t510t-prakn,
        ptext    TYPE t510t-ptext,
        fulltext TYPE string,
      END OF ty_premium .
    TYPES:
      BEGIN OF ty_t554t,
        awart TYPE t554t-awart,
        atext TYPE t554t-atext,
      END OF ty_t554t .
    TYPES:
      BEGIN OF ty_popover,
        description TYPE string,
        title       TYPE string,
        date        TYPE sy-datum,
        tp          TYPE string,
      END OF ty_popover .

    TYPES: BEGIN OF ty_account,
             name         TYPE  hrqtext,
             used         TYPE  hrptm_deduct,
             planned      TYPE  hrptm_deduct,
             balance      TYPE  hrptm_rest2,
             useorlose    TYPE  hrptm_rest,
             type         TYPE  abwko,
             atype        TYPE  awart,
             begda        TYPE  begda,
             endda        TYPE  endda,
             adjusted_bal TYPE  zess_dec_10_2,
             adjusted     TYPE string,
           END OF  ty_account.

    DATA:
      it_m_popover TYPE STANDARD TABLE OF ty_popover .
    DATA wa_m_popover TYPE ty_popover .
    DATA:
      it_premium TYPE STANDARD TABLE OF ty_premium .
    DATA wa_premium TYPE ty_premium .
    DATA:
      it_pernr TYPE STANDARD TABLE OF ty_pernr .
    DATA g_pernr TYPE ty_pernr .
    DATA:
      it_lrq TYPE STANDARD TABLE OF pa2001 .
    DATA wa_lrq TYPE pa2001 .
    DATA gv_form_input TYPE ty_form_input .
    DATA gv_pdfdata TYPE ty_pdfdata .
    DATA:
      it_worklist TYPE STANDARD TABLE OF ty_worklist .
    DATA wa_worklist TYPE ty_worklist .
    DATA:
      it_message TYPE STANDARD TABLE OF bapiret2 .
    DATA:
      it_target TYPE STANDARD TABLE OF cats_hours_per_day .
    DATA it_chart_month TYPE /neptune/chart_data_tt .
    DATA it_chart_abs TYPE /neptune/chart_data_tt .
    DATA:
      it_dates TYPE STANDARD TABLE OF ty_calendar .
    DATA:
      it_day TYPE STANDARD TABLE OF ty_entry .
    DATA:
      it_release TYPE STANDARD TABLE OF ty_entry .
    DATA it_cats TYPE tcatsdb_ext .
    DATA:
      it_t554t TYPE STANDARD TABLE OF ty_t554t .
    DATA:
*  data:
*    it_sales_order type standard table of ty_sales_order .
      it_wage TYPE STANDARD TABLE OF bapiemwaty .
    DATA:
*  data:
*    it_network type standard table of bapi_network_list_exp .
*  data:
*    it_activity type standard table of bapi1031_2 .
*  data:
*    it_operation type standard table of ty_operation .
      it_wbs TYPE STANDARD TABLE OF ty_wbs .
    DATA:
*  data:
*    it_iorder type standard table of ty_iorder .
*  data:
*    it_cost_center type standard table of bapi0012_2 .
      it_fav TYPE STANDARD TABLE OF ty_favorites .
    DATA:
      it_profile TYPE STANDARD TABLE OF tcats .
    DATA:
      it_profile_data TYPE STANDARD TABLE OF ty_profile_data .
    DATA wa_profile_data TYPE ty_profile_data .
    DATA:
      it_outbox TYPE STANDARD TABLE OF ty_entry .
    DATA gv_settings TYPE ty_settings .
    DATA gv_page_calendar TYPE ty_page_calendar .
    DATA wa_cats_entry TYPE ty_entry .
    DATA:
      it_cats_entry  TYPE STANDARD TABLE OF ty_entry .
    DATA:
*  data: it_cats_entry_cell type standard table of ty_entry_cell,
*        wa_cats_entry_cell type ty_entry_cell.
      lt_time_types TYPE TABLE OF zcat_timetypes_s .
    DATA:
      wa_time_types LIKE LINE OF lt_time_types .
    DATA:
      lt_position TYPE TABLE OF plans .
    DATA it_account TYPE ptarq_uia_quota_status_all_tab .
    DATA:
      wa_account LIKE LINE OF it_account .
    DATA ra_pernr TYPE /neptune/range_tab .
    DATA ra_multi TYPE /neptune/range_tab .
    DATA:
      it_premn   TYPE STANDARD TABLE OF ty_premn .
    DATA scr_pernr TYPE pa0001-pernr .
    DATA scr_profile TYPE catsvarian .
    DATA scr_timetype TYPE zcatsvarian .
    DATA:
      it_leave_balance TYPE STANDARD TABLE OF ty_account."zmss_absence_quotas .
    DATA:
      wa_leave_balance LIKE LINE OF it_leave_balance .
    DATA:
      it_lrq1 TYPE STANDARD TABLE OF pa2001 .
    DATA wa_lrq1 TYPE pa2001 .
    DATA it_subtype TYPE ptarq_uia_attabs_tab .
    DATA:
      it_dd07v    TYPE STANDARD TABLE OF dd07v .

    METHODS print .
  PROTECTED SECTION.
  PRIVATE SECTION.

    DATA wa_fav TYPE ty_favorites .
    DATA wa_chart TYPE /neptune/chart_data .
    DATA wa_cats TYPE bapicats2 .
    DATA wa_iorder TYPE ty_iorder .
    DATA wa_activity TYPE bapi1031_2 .
    DATA wa_day TYPE ty_entry .
    DATA wa_day1 TYPE ty_entry .
    DATA wa_t554t TYPE ty_t554t .
    DATA wa_wage TYPE bapiemwaty .
    DATA wa_dates TYPE ty_calendar .
*  data scr_pernr type P_PERNR .
    DATA gv_molga TYPE molga .
    DATA gv_kokrs TYPE kokrs .

    METHODS update_profile
      IMPORTING
        !server TYPE REF TO /neptune/cl_nad_server .
    METHODS settings_data_entered .
*  methods GET_SETTINGS_PAGE_DATA .
    METHODS get_data
      IMPORTING
        !ajax_value TYPE string .
    METHODS get_data_calendar .
    METHODS get_data_fav .
    METHODS get_pay_data .
    METHODS get_premium_data .
    METHODS get_data_wage .
    METHODS get_employee_number .
    METHODS build_cats .
    METHODS release
      IMPORTING
        !server TYPE REF TO /neptune/cl_nad_server .
    METHODS get_att_type_leave
      IMPORTING
        !scr_pernr TYPE pa2001-pernr .
*  methods GET_WORKLIST .
    METHODS get_att_type
      IMPORTING
        !lv_timetype TYPE catsvarian .
    METHODS get_worklist
      IMPORTING
        !ajax_value TYPE string OPTIONAL .
    METHODS leave_balance .
    METHODS save_table .
    METHODS get_list_premn .
    METHODS save_table_cell .
ENDCLASS.



CLASS ZCL_ESS_TIMESHEET_ENTRY IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_ESS_TIMESHEET_ENTRY->/NEPTUNE/IF_NAD_SERVER~HANDLE_ON_AJAX
* +-------------------------------------------------------------------------------------------------+
* | [--->] APPLID                         TYPE        STRING
* | [--->] AJAX_ID                        TYPE        STRING
* | [--->] AJAX_VALUE                     TYPE        STRING
* | [--->] SERVER                         TYPE REF TO /NEPTUNE/CL_NAD_SERVER
* | [--->] REQUEST                        TYPE        /NEPTUNE/DATA_REQUEST
* | [<-->] NAVIGATION                     TYPE        /NEPTUNE/AJAX_NAVIGATION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD /neptune/if_nad_server~handle_on_ajax.


    CASE ajax_id.

      WHEN 'GET_EMPLOYEE_NUMBER'.
        CALL METHOD get_employee_number( ).

      WHEN 'SYNC'.
        IF it_outbox IS NOT INITIAL.
          CALL METHOD save_table( ).
        ENDIF.
        CALL METHOD get_data( space ).

      WHEN 'RELEASE'.
        CALL METHOD release( server ).
        CALL METHOD get_data( space ).

      WHEN 'GET_LIST_PREMN'.
        CALL METHOD get_list_premn( ).

      WHEN 'UPDATE_PROFILE'.
        CALL METHOD update_profile( server ).

      WHEN 'GET_WORKLIST'.
        CALL METHOD get_worklist( ajax_value ).

      WHEN 'PRINT'.
        CALL METHOD print( ).

    ENDCASE.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_ESS_TIMESHEET_ENTRY->/NEPTUNE/IF_NAD_SERVER~HANDLE_ON_REQUEST
* +-------------------------------------------------------------------------------------------------+
* | [--->] APPLID                         TYPE        STRING
* | [--->] SERVER                         TYPE REF TO /NEPTUNE/CL_NAD_SERVER
* | [--->] KEY_ID                         TYPE        STRING(optional)
* | [--->] KEY                            TYPE        STRING
* | [--->] REQUEST                        TYPE        /NEPTUNE/DATA_REQUEST
* | [<-->] NAV_TO                         TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD /neptune/if_nad_server~handle_on_request.




  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_ESS_TIMESHEET_ENTRY->/NEPTUNE/IF_NAD_SERVER~HANDLE_ON_RESPONSE
* +-------------------------------------------------------------------------------------------------+
* | [--->] APPLID                         TYPE        STRING
* | [--->] SERVER                         TYPE REF TO /NEPTUNE/CL_NAD_SERVER
* | [--->] EVENT_ID                       TYPE        STRING
* | [--->] EVENT_KEY                      TYPE        STRING
* | [--->] KEY_ID                         TYPE        STRING(optional)
* | [--->] KEY                            TYPE        STRING
* | [--->] REQUEST                        TYPE        /NEPTUNE/DATA_REQUEST
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD /neptune/if_nad_server~handle_on_response.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_ESS_TIMESHEET_ENTRY->/NEPTUNE/IF_NAD_SERVER~HANDLE_ON_SUBMIT
* +-------------------------------------------------------------------------------------------------+
* | [--->] APPLID                         TYPE        STRING
* | [--->] EVENT_ID                       TYPE        STRING
* | [--->] EVENT_VALUE                    TYPE        STRING(optional)
* | [--->] SERVER                         TYPE REF TO /NEPTUNE/CL_NAD_SERVER
* | [--->] REQUEST                        TYPE        /NEPTUNE/DATA_REQUEST
* | [<-->] NAV_TO                         TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD /neptune/if_nad_server~handle_on_submit.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_ESS_TIMESHEET_ENTRY->/NEPTUNE/IF_NAD_SERVER~HANDLE_ON_SYNC_OUT
* +-------------------------------------------------------------------------------------------------+
* | [--->] APPLID                         TYPE        STRING
* | [--->] LASTSYNCDATE                   TYPE        STRING
* | [--->] SERVER                         TYPE REF TO /NEPTUNE/CL_NAD_SERVER
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD /neptune/if_nad_server~handle_on_sync_out.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ESS_TIMESHEET_ENTRY->BUILD_CATS
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD build_cats.

    TYPES: BEGIN OF ty_absence_text,
             time_type TYPE zcat_timetypes-time_type,
             type_text TYPE zcat_timetypes-type_text,
           END OF ty_absence_text.

    TYPES: BEGIN OF ty_absence_text_t554t,
             awart TYPE t554t-awart,
             atext TYPE t554t-atext,
           END OF ty_absence_text_t554t.

    TYPES: BEGIN OF ty_wage_text,
             lgart TYPE t512t-lgart,
             lgtxt TYPE t512t-lgtxt,
           END OF ty_wage_text.

    TYPES: BEGIN OF ty_premium_txt,
             prakn TYPE t510t-prakn,
             ptext TYPE t510t-ptext,
           END OF ty_premium_txt.

    TYPES: BEGIN OF ty_domain_txt,
             ddtext     TYPE dd07t-ddtext,
             domvalue_l TYPE dd07t-domvalue_l,
           END OF ty_domain_txt.

    TYPES:BEGIN OF ty_rejection_reason,
            reason TYPE tcatsdt-reason,
            text   TYPE tcatsdt-text,
          END OF ty_rejection_reason.
*
    DATA: wa_pa0001    TYPE pa0001,
          lv_aufpl     TYPE afko-aufpl,
          lv_hour(2)   TYPE n,
          lv_min(2)    TYPE n,
          lv_tabix     TYPE sy-tabix,
          lv_catshours TYPE string,
          lv_tot_hours TYPE catsdb-catshours.
    DATA: x(10) TYPE c VALUE '0'.
    DATA: wa_daynames TYPE ty_entry.
    DATA: day_p TYPE p.
    DATA lv_date TYPE sy-datum.

    DATA: it_absence_text       TYPE STANDARD TABLE OF ty_absence_text,
          wa_absence_text       TYPE ty_absence_text,
          it_absence_text_t554t TYPE STANDARD TABLE OF ty_absence_text_t554t,
          wa_absence_text_t554t TYPE ty_absence_text_t554t,
          it_wage_txt           TYPE STANDARD TABLE OF ty_wage_text,
          wa_wage_txt           TYPE ty_wage_text,
          it_premium_txt        TYPE STANDARD TABLE OF ty_premium_txt,
          wa_premium_txt        TYPE ty_premium_txt,
          it_domain_txt         TYPE STANDARD TABLE OF ty_domain_txt,
          wa_domain_txt         TYPE ty_domain_txt,
          it_rejection_reason   TYPE STANDARD TABLE OF ty_rejection_reason,
          wa_rejection_reason   TYPE ty_rejection_reason.


    DATA: temp_date TYPE dats,
          lv_type   TYPE string.

* Init
    CLEAR it_day.
    gv_page_calendar-count_all       = 0.
    gv_page_calendar-count_approve   = 0.
    gv_page_calendar-count_release   = 0.
    gv_page_calendar-count_unrelease = 0.
    gv_page_calendar-count_reject    = 0.

* Get Controlling area
    SELECT SINGLE *
           FROM pa0001
           INTO wa_pa0001
           WHERE pernr EQ scr_pernr
             AND subty EQ space
             AND objps EQ space
             AND sprps EQ space
             AND endda GE sy-datum
             AND begda LE sy-datum.

*   Get Absence Type
    SELECT time_type
           type_text
        FROM zcat_timetypes
        INTO TABLE it_absence_text
        WHERE cats_profile EQ scr_profile.

    IF sy-subrc NE 0. "
      SELECT awart
             atext
             FROM t554t
             INTO TABLE it_absence_text_t554t
             WHERE sprsl EQ sy-langu.
*             AND awart EQ wa_cats-abs_att_type.
    ENDIF.

*    *   Get Wage Type
    SELECT lgart lgtxt
           FROM t512t
           INTO TABLE it_wage_txt
           WHERE sprsl EQ sy-langu
             AND molga EQ gv_molga.

*    Get Premium Type text
    SELECT prakn
           ptext
         FROM t510t
         INTO TABLE it_premium_txt
         WHERE sprsl EQ sy-langu.


*   Status Text
    SELECT ddtext
           domvalue_l
           FROM dd07t
           INTO TABLE it_domain_txt
           WHERE domname    EQ 'CATSSTATUS'
             AND ddlanguage EQ sy-langu
             AND as4local   EQ 'A'.

*Rejection Reasons
    SELECT reason
           text
           FROM tcatsdt
           INTO TABLE it_rejection_reason
           WHERE langu EQ sy-langu.

    LOOP AT it_cats INTO wa_cats.

      CASE wa_cats-status.

        WHEN '10'.
          gv_page_calendar-count_unrelease = gv_page_calendar-count_unrelease + 1.
          wa_dates-date = wa_cats-workdate.
          wa_dates-type = 'Type01'.
          APPEND wa_dates TO it_dates.

        WHEN '20'.
          gv_page_calendar-count_release = gv_page_calendar-count_release + 1.
          wa_dates-date = wa_cats-workdate.
          wa_dates-type = 'Type04'.
          APPEND wa_dates TO it_dates.

        WHEN '30'.
          gv_page_calendar-count_approve = gv_page_calendar-count_approve + 1.
          wa_dates-date = wa_cats-workdate.
          wa_dates-type = 'Type06'.
          APPEND wa_dates TO it_dates.

        WHEN '40'.
          gv_page_calendar-count_reject = gv_page_calendar-count_reject + 1.
          wa_dates-date = wa_cats-workdate.
          wa_dates-type = 'Type00'.
          APPEND wa_dates TO it_dates.
      ENDCASE.

      gv_page_calendar-count_all = gv_page_calendar-count_all + 1.


*   BUILD LIST ------------------------------------------------------*
      CLEAR wa_day.
      CLEAR day_p.
      MOVE-CORRESPONDING wa_cats TO wa_day.

* Placing Wbs OR cost center in one variable.
      IF wa_cats-rec_cctr IS NOT INITIAL.
        wa_day-cctr_wbs = wa_cats-rec_cctr.
      ENDIF.

      IF wa_cats-wbs_element IS NOT INITIAL.
        wa_day-cctr_wbs = wa_cats-wbs_element.
      ENDIF.

*Get daynames from workdate
      day_p = wa_day-workdate MOD 7.

      IF day_p > 1.
        day_p = day_p - 1.
      ELSE.
        day_p = day_p + 6.
      ENDIF.

      CASE day_p.
        WHEN 1.
          wa_day-dname = 'Mon'.
        WHEN 2.
          wa_day-dname = 'Tue'.
        WHEN 3.
          wa_day-dname = 'Wed'.
        WHEN 4.
          wa_day-dname = 'Thu'.
        WHEN 5.
          wa_day-dname = 'Fri'.
        WHEN 6.
          wa_day-dname = 'Sat'.
        WHEN 7.
          wa_day-dname = 'Sun'.
      ENDCASE.

*Absence Types Text
      READ TABLE it_absence_text INTO wa_absence_text WITH KEY time_type = wa_cats-abs_att_type.
      IF sy-subrc EQ 0.
        wa_day-abs_att_type_txt = wa_absence_text-type_text.
      ELSE.
        READ TABLE it_absence_text_t554t INTO wa_absence_text_t554t WITH KEY awart = wa_cats-abs_att_type.
        wa_day-abs_att_type_txt = wa_absence_text_t554t-atext.
      ENDIF.


*Wage Types Text
      IF wa_cats-wagetype IS NOT INITIAL.
        READ TABLE it_wage_txt INTO wa_wage_txt WITH KEY lgart = wa_cats-wagetype.
        wa_day-wagetype_txt = wa_wage_txt-lgtxt.
      ENDIF.


*  Premium type text
      IF wa_day-bonustype IS NOT INITIAL.
        READ TABLE it_premium_txt INTO wa_premium_txt WITH KEY prakn = wa_day-bonustype.
        wa_day-bonustype_txt = wa_premium_txt-ptext.
      ENDIF.


**   Status Text
      READ TABLE it_domain_txt INTO wa_domain_txt WITH KEY domvalue_l = wa_cats-status.
      IF sy-subrc EQ 0.
        wa_day-status_text = wa_domain_txt-ddtext.
      ENDIF.

*Get Worklist for specfic workdate
      SELECT SINGLE zzposition
                    zzapproverid
                    zzapprovername
                    zzpositiontext
                    zzorgunittext
                    zzcostobjtext
                    FROM catsdb
                    INTO (wa_day-pln01, wa_day-zzapproverid, wa_day-zzapprovername,
                    wa_day-zzpositiontext, wa_day-zzorgunittext, wa_day-zzcostobjtext)
                    WHERE pernr EQ scr_pernr
                    AND counter EQ wa_cats-counter.


*   Get WBS Text
      IF wa_cats-wbs_element IS NOT INITIAL.
        SELECT SINGLE post1
               FROM prps
               INTO wa_day-wbs_txt
               WHERE posid EQ wa_cats-wbs_element.
      ENDIF.

*    Get Rejection Reason text
      IF wa_cats-reason IS NOT INITIAL.
        READ TABLE it_rejection_reason INTO wa_rejection_reason WITH KEY reason = wa_cats-reason.
        wa_day-reasontext = wa_rejection_reason-text.
      ENDIF.

*   Number of Hours
      IF wa_day-catshours IS INITIAL.
        wa_day-catshours = wa_cats-quantity.
        wa_day-unit      = wa_cats-iso_unitq.
      ENDIF.

*   Time formatting
      lv_catshours = wa_cats-catshours.
      SPLIT lv_catshours AT '.' INTO lv_hour
                                     lv_min.

      SHIFT lv_hour RIGHT DELETING TRAILING space.
      SHIFT lv_min  RIGHT DELETING TRAILING space.

      OVERLAY lv_hour WITH '00'.
      OVERLAY lv_min  WITH '00'.

*   Convert min from Number (100) to Minute (60)
      lv_min = ( 60 / 100 ) * lv_min.

*   Set Time
      CONCATENATE lv_hour
                  lv_min
                  '00'
                  INTO wa_day-hours_changed.

*   Set Status Text
      CASE wa_cats-status.
        WHEN '20' OR '10'.
          wa_day-status_state = 'Warning'.
        WHEN '30'.
          wa_day-status_state = 'Success'.
        WHEN '40'.
          wa_day-status_state = 'Error'.
        WHEN OTHERS.
          wa_day-status_state = 'None'.
      ENDCASE.

      APPEND wa_day TO it_day.
      CLEAR:  wa_day,
              wa_absence_text,
              wa_absence_text_t554t,
              wa_wage_txt,
              wa_premium_txt,
              wa_domain_txt,
              wa_rejection_reason.
    ENDLOOP.

    SORT it_dates BY date.

    REFRESH:it_absence_text,
            it_absence_text_t554t,
            it_wage_txt,
            it_premium_txt,
            it_domain_txt,
            it_rejection_reason.



*Changing Calendar Color table if multiple entries exist on the same day
    LOOP AT it_dates INTO wa_dates.
      IF lv_type NE wa_dates-type AND temp_date EQ wa_dates-date.
        wa_dates-type = 'Type10'.
        MODIFY it_dates FROM wa_dates TRANSPORTING type WHERE date EQ wa_dates-date.
      ENDIF.
      lv_type = wa_dates-type.
      temp_date = wa_dates-date.
    ENDLOOP.

*    Get Leave Request Data from 2001 .
    lv_date = sy-datum - 180.
    SELECT * FROM pa2001
      INTO TABLE it_lrq WHERE pernr EQ scr_pernr
                        AND begda GE lv_date
                        AND awtyp NE 'CATS'.

    LOOP AT it_lrq INTO wa_lrq.
      MOVE wa_lrq TO wa_lrq1.
      IF wa_lrq-kaltg GT 1.
        CLEAR x.
        DO wa_lrq-kaltg TIMES.
          MOVE wa_lrq TO wa_lrq1.
          wa_lrq1-begda = wa_lrq1-begda + x.
          APPEND wa_lrq1 TO it_lrq1.
          CLEAR wa_lrq1.
          x = x + 1.
        ENDDO.
      ELSE.
        APPEND wa_lrq1 TO it_lrq1.
        CLEAR wa_lrq1.
      ENDIF.
    ENDLOOP.
* Sorting
    SORT it_day BY workdate DESCENDING starttime.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ESS_TIMESHEET_ENTRY->GET_ATT_TYPE
* +-------------------------------------------------------------------------------------------------+
* | [--->] LV_TIMETYPE                    TYPE        CATSVARIAN
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_att_type.
    DATA:
**          lt_time_types type table of zcat_timetypes_s,
      la_time_types LIKE LINE OF lt_time_types,
      l_profile     TYPE catsvarian,
      la_f4_values  TYPE hrxss_cat_rfc_f4_values,
      l_f4value_tbx TYPE i,
      l_flist_tbx   TYPE i,
      l_description TYPE string,
      la_flist      TYPE hrxss_cat_rfc_fieldlist_data,
      l_bukrs       TYPE bukrs,
      l_index       TYPE sy-index.
*        lv_timetype type pa0007-zzcats_de_profile.
*  *  Get company code from parameter ID
    GET PARAMETER ID 'BUK' FIELD l_bukrs.
*  if scr_profile is initial.
*    get parameter id 'CVR' field l_profile.
*    translate l_profile to upper case.
*    scr_profile = l_profile.
*   endif.

    IF lv_timetype IS NOT INITIAL.
      SELECT cats_profile time_type type_text sequence_no
         FROM zcat_timetypes INTO TABLE lt_time_types
         WHERE cats_profile = lv_timetype
           AND companycode  = l_bukrs.
    ELSE.
      SELECT cats_profile time_type type_text sequence_no
       FROM zcat_timetypes INTO TABLE lt_time_types
       WHERE companycode  = l_bukrs.
    ENDIF.

    IF lt_time_types IS INITIAL .  "For profiles not available in lt_time_types
      SELECT awart atext
         FROM t554t
         INTO TABLE it_t554t
         WHERE sprsl EQ sy-langu.

      LOOP AT it_t554t INTO wa_t554t.
        wa_time_types-time_type = wa_t554t-awart.
        wa_time_types-type_text = wa_t554t-atext.
        APPEND wa_time_types TO lt_time_types.
        CLEAR wa_time_types.
      ENDLOOP.

    ENDIF.

    SORT lt_time_types BY time_type.
    DELETE ADJACENT DUPLICATES FROM lt_time_types COMPARING time_type.

    SORT lt_time_types BY sequence_no.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ESS_TIMESHEET_ENTRY->GET_ATT_TYPE_LEAVE
* +-------------------------------------------------------------------------------------------------+
* | [--->] SCR_PERNR                      TYPE        PA2001-PERNR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_att_type_leave.
    DATA: it_messages      TYPE ptarq_uia_messages_tab.
    DATA: l_werks     TYPE persa,
          l_btrtl     TYPE btrtl,
          lt_subtytab TYPE TABLE OF ess_subtytab,
          la_subtytab TYPE ess_subtytab,
          la_subtype  LIKE LINE OF it_subtype.

* Get Absence Types
    SELECT SINGLE werks btrtl FROM pa0001
      INTO (l_werks, l_btrtl)
      WHERE pernr EQ scr_pernr
      AND endda GE sy-datum.

* Get all absence types
    CALL FUNCTION 'HR_GET_ESS_SUBTYPES_WEB'
      EXPORTING
        pernr            = scr_pernr
        infty            = '2001'
        molga            = '10'
        personnelarea    = l_werks
        perssubarea      = l_btrtl
      TABLES
        subtytab         = lt_subtytab
      EXCEPTIONS
        no_subty         = 1
        no_personnelarea = 2
        OTHERS           = 3.

    IF sy-subrc = 0.
      DELETE lt_subtytab WHERE subty EQ 'AAAA'.
      LOOP AT lt_subtytab INTO la_subtytab.
        MOVE-CORRESPONDING la_subtytab TO la_subtype.
        APPEND la_subtype TO it_subtype.
      ENDLOOP.
    ENDIF.

    SORT it_subtype BY subtytext DESCENDING.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ESS_TIMESHEET_ENTRY->GET_DATA
* +-------------------------------------------------------------------------------------------------+
* | [--->] AJAX_VALUE                     TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_data.

*Call list of methods on complete refresh or sync of application
    CALL METHOD settings_data_entered( ).
* Get Time Data
    CALL METHOD get_data_calendar( ).
* Get Favourites
    CALL METHOD get_data_fav( ).
* Get Leave balances
    CALL METHOD leave_balance( ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ESS_TIMESHEET_ENTRY->GET_DATA_CALENDAR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_data_calendar.
*
    DATA: lv_tabix     TYPE sy-tabix,
          lv_date_from TYPE sy-datum,
          lv_date_end  TYPE sy-datum.

    DATA: it_employee TYPE STANDARD TABLE OF bapihrselemployee,
          it_return   TYPE STANDARD TABLE OF bapiret2,
          wa_employee LIKE LINE OF it_employee.


* Any Employee Number ?
    CHECK scr_pernr IS NOT INITIAL.

* Add Employee to Select Range
    wa_employee-sign   = 'I'.
    wa_employee-option = 'EQ'.
    wa_employee-low    = scr_pernr.
    APPEND wa_employee TO it_employee.

* Set Date Range
    lv_date_from =  wa_profile_data-lower_date.
    lv_date_end  =  wa_profile_data-upper_date.

* Get CATS Data
    CLEAR it_cats.
    CALL FUNCTION 'BAPI_CATIMESHEETRECORD_GETLIST'
      EXPORTING
        fromdate        = lv_date_from
        todate          = lv_date_end
      TABLES
        sel_employee    = it_employee
        catsrecords_out = it_cats
        return          = it_return.

    DELETE it_cats WHERE status EQ '50'.
    DELETE it_cats WHERE status EQ '60'.
    DELETE it_cats WHERE counter IS INITIAL.

    SORT it_cats BY status DESCENDING.

* Build Cats Data
    CALL METHOD build_cats( ).


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ESS_TIMESHEET_ENTRY->GET_DATA_FAV
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_data_fav.
*
    DATA: lv_tabix TYPE sy-tabix.

* Collect Favorites
    LOOP AT it_day INTO wa_day.
      wa_fav-records = 1.
      MOVE-CORRESPONDING wa_day TO wa_fav.
      COLLECT wa_fav INTO it_fav.

    ENDLOOP.

* Sorting
    SORT it_fav BY records DESCENDING.

* Build Filter String
    LOOP AT it_fav INTO wa_fav.

      lv_tabix = sy-tabix.

      CONCATENATE
                   wa_fav-acttype
*                   wa_fav-avtivity
                   wa_fav-wbs_element
                   wa_fav-abs_att_type
                   wa_fav-wagetype
                   wa_fav-rec_order
                   wa_fav-abs_att_type_txt
                   wa_fav-wagetype_txt
                   wa_fav-activity_txt
*                   wa_fav-iorder_txt
                   wa_fav-wbs_txt
*                   wa_fav-cocntr_txt
                   wa_fav-rec_cctr
                   wa_fav-starttime
                   wa_fav-endtime
*                   wa_fav-network_txt
*                   wa_fav-avtivity_txt
*                   wa_fav-sales_order_txt
                  INTO wa_fav-filter.

      MODIFY it_fav FROM wa_fav INDEX lv_tabix.

    ENDLOOP.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ESS_TIMESHEET_ENTRY->GET_DATA_WAGE
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_data_wage.
*
* Get Data
    CALL FUNCTION 'BAPI_WAGETYPE_EMPLOYEEGETLIST'
      EXPORTING
        employeenumber = scr_pernr
      TABLES
        wagetypes      = it_wage.

* Sorting
    SORT it_wage BY wageltext.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ESS_TIMESHEET_ENTRY->GET_EMPLOYEE_NUMBER
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_employee_number.
*
* TO STORE THE PERNR # IN GLOBAL VARIBLE FRONT END.
    DATA: lv_message TYPE REF TO if_hrpa_message_handler.
** Get PERNR
    SELECT SINGLE pernr FROM pa0105
           INTO g_pernr
           WHERE usrty EQ '0001'
             AND usrid EQ sy-uname
             AND endda GE sy-datum
             AND begda LE sy-datum.
*********** Temp Transport Fix By Shree ***********
*    SELECT SINGLE zzcats_de_profile zzcats_profile INTO (g_pernr-prof, g_pernr-timetype)
*      FROM pa0007 WHERE pernr EQ g_pernr
*                  AND endda GE sy-datum.

*    if sy-subrc ne 0.
*      get parameter id 'CVR' field g_pernr-prof.
*    endif.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ESS_TIMESHEET_ENTRY->GET_LIST_PREMN
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_list_premn.
*
    TYPES:
      BEGIN OF ty_premn_temp,
        pernr TYPE char8,
        vorna TYPE vorna,
        nachn TYPE nachn,
      END OF ty_premn_temp .

    DATA:
      it_premn_temp    TYPE STANDARD TABLE OF ty_premn_temp .

    DATA: ls_premn      TYPE ty_premn,
          ls_premn_temp TYPE ty_premn_temp,
          lv_tabix      TYPE sy-tabix.

    REFRESH: it_premn, it_premn_temp.

* Get fmfctrt
*    SELECT pernr vorna nachn
*           FROM m_premn
*           INTO CORRESPONDING FIELDS OF TABLE it_premn_temp
*           WHERE begda_0002 LE sy-datum
*             AND endda_0002 GE sy-datum.
    SELECT pa0000~pernr m_premn~vorna m_premn~nachn
    INTO CORRESPONDING FIELDS OF TABLE it_premn_temp
    FROM ( pa0000
           INNER JOIN m_premn
           ON  m_premn~pernr = pa0000~pernr )
         WHERE pa0000~endda       GE sy-datum
           AND pa0000~begda       LE sy-datum
           AND pa0000~stat1       IN ('1', '3')
           AND m_premn~endda_0002 GE sy-datum
           AND m_premn~begda_0002 LE sy-datum.

* Build Filter
    LOOP AT it_premn_temp INTO ls_premn_temp.

      CLEAR: ls_premn.
      MOVE-CORRESPONDING ls_premn_temp TO ls_premn.

      CONCATENATE ls_premn_temp-nachn
                  ls_premn_temp-vorna
             INTO ls_premn-prntx SEPARATED BY ' '.
      SHIFT ls_premn-prntx LEFT DELETING LEADING ' '.

      CONCATENATE ls_premn-pernr
                  ls_premn-prntx
             INTO ls_premn-filter.

      APPEND ls_premn TO it_premn.
    ENDLOOP.

* Sorting
    SORT it_premn BY prntx.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ESS_TIMESHEET_ENTRY->GET_PAY_DATA
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_pay_data.
    DATA:  it_dd07v1   TYPE STANDARD TABLE OF dd07v.

*
    CALL FUNCTION 'DD_DOMA_GET'
      EXPORTING
        domain_name   = 'AUFKN'
*       GET_STATE     = 'M  '
        langu         = sy-langu
*       PRID          = 0
*       WITHTEXT      = 'X'
      TABLES
        dd07v_tab_a   = it_dd07v
        dd07v_tab_n   = it_dd07v1
      EXCEPTIONS
        illegal_value = 1
        op_failure    = 2
        OTHERS        = 3.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ESS_TIMESHEET_ENTRY->GET_PREMIUM_DATA
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_premium_data.
*
    SELECT prakn ptext FROM t510t
      INTO TABLE it_premium
      WHERE sprsl EQ sy-langu.

    LOOP AT it_premium INTO wa_premium.
      CONCATENATE wa_premium-prakn ' - ' wa_premium-ptext INTO wa_premium-fulltext.
      MODIFY it_premium FROM wa_premium.
    ENDLOOP.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ESS_TIMESHEET_ENTRY->GET_WORKLIST
* +-------------------------------------------------------------------------------------------------+
* | [--->] AJAX_VALUE                     TYPE        STRING(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_worklist.
*
    DATA:l_position    TYPE p9027-pln01,
         l_current_app TYPE zzapproverid,
         l_name_app    TYPE zzapprovername.

    DATA: t_9027         TYPE STANDARD TABLE OF pa9027,
          wa_9027        TYPE pa9027,
          l_position1    TYPE p9027-pln01,
          l_costobj      TYPE p9027-kst01,
          l_lines        TYPE i,
          lt_position    TYPE TABLE OF plans,
          l_catsw        TYPE catsw,
          l_sobid        TYPE sobid,
          l_orgeh        TYPE orgeh,
*       l_costobj      type p9027-kst01,
          l_control_area TYPE kokrs.

    DATA: l_len TYPE i.
    DATA: l_subgrp    TYPE persk,
          v_startdate TYPE sy-datum,
          v_enddate   TYPE sy-datum.


    CALL METHOD settings_data_entered( ).
    IF scr_pernr IS INITIAL.
      CALL METHOD get_employee_number( ).
      scr_pernr = g_pernr-pernr.
    ENDIF.

    IF ajax_value IS INITIAL.
      v_startdate = sy-datum.
      v_enddate = sy-datum.
    ELSE.
      SPLIT ajax_value AT '-' INTO v_startdate v_enddate.
    ENDIF.

* Check is employee is an S2 they have to use a worklist
    IF scr_profile <> 'CATSLOAD'.
      SELECT SINGLE persk FROM pa0001 INTO l_subgrp WHERE
                    pernr = scr_pernr AND
                    begda LE sy-datum AND
                    endda LE sy-datum AND
                    persk = 'S2'.

* Check if employee has multiple position on 9027
      SELECT * FROM pa9027 INTO TABLE t_9027
            WHERE pernr  = scr_pernr AND
                  begda <= v_enddate AND
                  endda >= v_startdate.


      LOOP AT t_9027 INTO wa_9027.
        DO 25 TIMES VARYING l_position1 FROM wa_9027-pln01 NEXT wa_9027-pln02
                    VARYING l_costobj   FROM wa_9027-kst01 NEXT wa_9027-kst02.

          IF l_position1 IS INITIAL AND l_costobj IS INITIAL.
            EXIT.
          ELSE.
*      l_lines = l_lines + 1.
            APPEND l_position1 TO lt_position.
          ENDIF.
*    enddo.
*  endloop.

* make sure they have one type of position.
*  sort lt_position.
          DELETE ADJACENT DUPLICATES FROM lt_position.
          DESCRIBE TABLE lt_position LINES l_lines.
          READ TABLE lt_position INTO l_position1 INDEX sy-tabix.

          CALL FUNCTION 'ZWF_GET_TIME_APPROVER'
            EXPORTING
              emp_position    = l_position1
              emp_pernr       = scr_pernr
            IMPORTING
              approver_userid = l_catsw-zzapproverid
              approver_name   = l_catsw-zzapprovername.

*          IF l_catsw-zzapproverid IS INITIAL AND l_catsw-zzapprovername IS INITIAL.
*            CONTINUE.
*          ENDIF.
          SELECT SINGLE stext FROM hrp1000 INTO l_catsw-zzpositiontext
                       WHERE otype = 'S'      AND
                        objid = l_position1    AND
                        endda >= sy-datum AND
                        begda <= sy-datum.

          SELECT SINGLE sobid INTO l_sobid FROM hrp1001
              WHERE otype = 'S'           AND
                    endda >= sy-datum AND
                    begda <= sy-datum AND
                    objid = l_position1    AND
                    plvar = '01'          AND
                    rsign = 'A'           AND
                    relat = '003'         AND
                    sclas = 'O'.


          IF sy-subrc = 0.
            MOVE l_sobid TO l_orgeh.
            SELECT SINGLE orgtx INTO l_catsw-zzorgunittext FROM t527x
                WHERE sprsl  = 'E'          AND
                      orgeh  = l_orgeh      AND
                      endda >= sy-datum AND
                      begda <= sy-datum.
          ENDIF.

          l_len = strlen( l_costobj ).
          IF l_len > 10.
            SELECT  SINGLE pspnr post1
                    FROM prps INTO (l_catsw-rproj, l_catsw-zzcostobjtext)
                    WHERE posid = l_costobj.
          ELSE.
            l_catsw-skostl = l_costobj.

            GET PARAMETER ID 'CAC' FIELD l_control_area.

            SELECT SINGLE ktext FROM cskt INTO l_catsw-zzcostobjtext
                        WHERE kokrs = l_control_area " controlling area
                        AND kostl = l_costobj   " cost center
                        AND datbi GE sy-datum   " valid to date
                        AND spras = 'E'.

          ENDIF.
          l_catsw-rkostl = l_catsw-skostl.

* Final Entries

          wa_worklist-pln01 = l_position1.
          wa_worklist-rec_cctr = l_costobj.
          wa_worklist-zzapproverid = l_catsw-zzapproverid.
          wa_worklist-zzapprovername = l_catsw-zzapprovername.
          wa_worklist-zzpositiontext = l_catsw-zzpositiontext.
          wa_worklist-sobid = l_sobid.
          wa_worklist-zzorgunittext = l_catsw-zzorgunittext.
          wa_worklist-zzcostobjtext = l_catsw-zzcostobjtext.
          APPEND wa_worklist TO it_worklist.
          CLEAR wa_worklist.
          CLEAR l_catsw.
        ENDDO.
      ENDLOOP.
    ENDIF.


    DATA: lv_wk_count TYPE i.
    DESCRIBE TABLE it_worklist LINES lv_wk_count.
    IF lv_wk_count GT 1.
      LOOP AT it_worklist INTO wa_worklist.
        wa_worklist-needworklist = 'X'.
        MODIFY it_worklist FROM wa_worklist TRANSPORTING needworklist.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_ESS_TIMESHEET_ENTRY->IF_HRESS_CATS_PRINT_FORM~GET_FORM_DATA
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_PERNR                       TYPE        PERNR_D
* | [--->] IV_BEGDA                       TYPE        DATUM
* | [--->] IV_ENDDA                       TYPE        DATUM
* | [--->] IV_FORM_NAME                   TYPE        FPNAME
* | [--->] IV_PROFILE                     TYPE        CATSVARIAN
* | [<---] EV_PDF_XSTRING                 TYPE        XSTRING
* | [<---] EV_ERROR_STRING                TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD if_hress_cats_print_form~get_form_data.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_ESS_TIMESHEET_ENTRY->IF_HRESS_CATS_PRINT_FORM~GET_FORM_NAMES
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_PERNR                       TYPE        PERNR_D
* | [--->] IV_BEGDA                       TYPE        DATUM (default =SY-DATUM)
* | [--->] IV_ENDDA                       TYPE        DATUM (default =SY-DATUM)
* | [--->] IV_PROFILE                     TYPE        CATSVARIAN
* | [<---] ET_FORMS                       TYPE        TFPNAME
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD if_hress_cats_print_form~get_form_names.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ESS_TIMESHEET_ENTRY->LEAVE_BALANCE
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD leave_balance.
**
*    data: it_messages type ptarq_uia_messages_tab,
*          it_commands type ptarq_uia_command_tab,
*          wa_messages like line of it_messages.

    DATA: it_return        TYPE STANDARD TABLE OF bapiret2,
          lt_account       TYPE TABLE OF zmss_absence_quotas,
          ls_account       TYPE zmss_absence_quotas, ty_account,
          ls_leave_balance TYPE ty_account.

    CALL FUNCTION 'ZESS_ABSENCE_QUOTAS'
      EXPORTING
        pernr  = scr_pernr
      TABLES
        quotas = lt_account
        return = it_return.

    LOOP AT lt_account INTO ls_account.
      IF ls_account-balance EQ '0'.
        DELETE lt_account INDEX sy-tabix.
      ELSE.
        MOVE-CORRESPONDING ls_account TO ls_leave_balance .
        ls_leave_balance-adjusted = ls_account-adjusted_bal.
        IF ls_account-atype EQ 'VAC' AND ls_account-adjusted_bal GT '280.00'.
          ls_leave_balance-adjusted = '280.00*'.
        ENDIF.
        APPEND ls_leave_balance TO it_leave_balance.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_ESS_TIMESHEET_ENTRY->PRINT
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD print.
    DATA: ls_formoutput TYPE fpformoutput,
          lt_body       TYPE hress_cats_pdf_body_t,
          lv_error      TYPE string.
*    lv_error = 'No PDF Data provided for the selected Form'.
*
*call method obj1->if_hress_cats_print_form~get_form_data
*  exporting
*    iv_pernr        = '00011818'
*    iv_begda        = '20160801'
*    iv_endda        = '20160831'
*    iv_form_name    = 'HRESS_CATS_PRINT_FORM'
*    iv_profile      = 'REGLVWL'
*  importing
*    ev_pdf_xstring  = ls_header
*    ev_error_string = lt_body
*    .
    DATA obj1 TYPE REF TO cl_hress_cats_print_pdf_data.

    CREATE OBJECT obj1.

    CALL METHOD settings_data_entered( ).

    CALL METHOD obj1->if_hress_cats_print_form~get_form_data
      EXPORTING
        iv_pernr        = scr_pernr
        iv_begda        = gv_form_input-iv_begda
        iv_endda        = gv_form_input-iv_endda
        iv_form_name    = 'HRESS_CATS_PRINT_FORM'
        iv_profile      = scr_profile
      IMPORTING
        ev_pdf_xstring  = ls_formoutput-pdf
        ev_error_string = lv_error.

    IF ls_formoutput-pdf IS NOT INITIAL.
*    Base64 Encode
      CALL FUNCTION 'SCMS_BASE64_ENCODE_STR'
        EXPORTING
          input  = ls_formoutput-pdf
        IMPORTING
          output = gv_pdfdata-pdf.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ESS_TIMESHEET_ENTRY->RELEASE
* +-------------------------------------------------------------------------------------------------+
* | [--->] SERVER                         TYPE REF TO /NEPTUNE/CL_NAD_SERVER
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD release.
*
    DATA: it_cats_change TYPE STANDARD TABLE OF bapicats3,
          it_return      TYPE STANDARD TABLE OF bapiret2,
          wa_return      LIKE LINE OF it_return,
          wa_message     TYPE /neptune/message,
          wa_cats_change LIKE LINE OF it_cats_change.

    DATA: it_ext_in        TYPE STANDARD TABLE OF bapi_te_catsdb,
          wa_ext_in        TYPE bapi_te_catsdb,
          it_extension_in  TYPE STANDARD TABLE OF bapicats7,
          it_extension_out TYPE STANDARD TABLE OF bapicats7,
          wa_extension_in  TYPE bapicats7,
          len_cctr_wbs     TYPE i.

    CALL METHOD settings_data_entered( ).
* Build change table
*  loop at it_release into wa_day where selected eq 'true'.
    LOOP AT it_cats_entry INTO wa_day WHERE status EQ '10'.

      MOVE-CORRESPONDING wa_day TO wa_cats_change.

*Seperate Cost center/ WBS based on front-end input
      len_cctr_wbs = strlen( wa_day-cctr_wbs ).

      IF len_cctr_wbs GT 10.
        wa_cats_change-wbs_element = wa_day-cctr_wbs.
      ELSE.
        wa_cats_change-rec_cctr = wa_day-cctr_wbs.
      ENDIF.

      IF wa_cats_change-bonustype IS NOT INITIAL.
        SELECT SINGLE prakz FROM t510p INTO wa_cats_change-bonusvalue WHERE
        prakn EQ wa_cats_change-bonustype.
      ENDIF.

*      wa_cats_change-activity = wa_day-avtivity.
      APPEND wa_cats_change TO it_cats_change.
      CLEAR  wa_cats_change.

      wa_ext_in-row = '1'.
      wa_ext_in-zzposition = wa_day-pln01.
      wa_ext_in-zzorgunittext = wa_day-zzorgunittext.
      wa_ext_in-zzapproverid = wa_day-zzapproverid.
      wa_ext_in-zzapprovername = wa_day-zzapprovername.
      wa_ext_in-zzpositiontext = wa_day-zzpositiontext.
      wa_ext_in-zzcostobjtext = wa_day-zzcostobjtext.
      APPEND wa_ext_in TO it_ext_in.

      wa_extension_in-structure = 'BAPI_TE_CATSDB'.
      wa_extension_in-valuepart1 = wa_ext_in.
      APPEND wa_extension_in TO it_extension_in.
      CLEAR wa_extension_in.


      CALL FUNCTION 'BAPI_CATIMESHEETMGR_CHANGE'
        EXPORTING
          profile        = scr_profile
*         TESTRUN        =
          release_data   = 'X'
*         AGENT          =
*         TEXT_FORMAT_IMP        =
        TABLES
          catsrecords_in = it_cats_change
          extensionin    = it_extension_in
*         CATSRECORDS_OUT        =
*         EXTENSIONOUT   =
*         WORKFLOW_TEXT  =
          return         = it_return.
* Commit Work
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'.

      DELETE it_return WHERE type EQ 'S'.
      DELETE it_return WHERE type EQ 'I'.

      LOOP AT it_return INTO wa_return.
        CASE wa_return-type.
          WHEN 'E'.
            wa_m_popover-tp = 'Error'.
            wa_m_popover-description = wa_return-message.
            wa_m_popover-title = wa_return-number.
            wa_m_popover-date = wa_cats_entry-workdate.
          WHEN 'W'.
            wa_m_popover-tp = 'Warning'.
            wa_m_popover-description = wa_return-message.
            wa_m_popover-title = wa_return-number.
            wa_m_popover-date = wa_cats_entry-workdate.
        ENDCASE.

        APPEND wa_m_popover TO it_m_popover.
        CLEAR wa_m_popover.
      ENDLOOP.

      REFRESH it_cats_change.
      REFRESH it_extension_in.
    ENDLOOP.

* Delete Table Content
    REFRESH it_release.


*--------------------------------------------------------------------
* Update Data on the Client
*--------------------------------------------------------------------

* Get Time Data
*    CALL METHOD get_data_release( ).

    it_release[] = it_day[].

* Get Time Data
    CALL METHOD get_data_calendar( ).


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ESS_TIMESHEET_ENTRY->SAVE_TABLE
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD save_table.
*
    DATA: it_cats_insert       TYPE STANDARD TABLE OF bapicats1,
          it_cats_extension_in TYPE STANDARD TABLE OF bapicats7,
          it_cats_change       TYPE STANDARD TABLE OF bapicats3,
          it_cats_delete       TYPE STANDARD TABLE OF bapicats4,
          it_return            TYPE STANDARD TABLE OF bapiret2,
          wa_cats_insert       LIKE LINE OF it_cats_insert,
          wa_cats_extension_in LIKE LINE OF it_cats_extension_in,
          wa_cats_change       LIKE LINE OF it_cats_change,
          wa_cats_delete       LIKE LINE OF it_cats_delete,
          wa_return            LIKE LINE OF it_return,
          wa_message           LIKE LINE OF it_message,
          wa_catsdb            TYPE catsdb,
          lv_tabix             TYPE sy-tabix,
          lv_catshours         TYPE string,
          lv_error             TYPE c,
          lv_min(2)            TYPE n,
          lv_hour(2)           TYPE n,
          lv_pa0105            TYPE pa0105.

    DATA:   pln01     TYPE p9027-pln01,
            lv_apid   TYPE zzapproverid,
            lv_apname TYPE zzapprovername,
            lv_ptext  TYPE stext,
            lv_sobid  TYPE sobid,
            lv_org    TYPE orgtx,
            lv_ctext  TYPE char40,
            lv_cobj   TYPE p9027-kst01.

    DATA: it_ext_in        TYPE STANDARD TABLE OF bapi_te_catsdb,
          wa_ext_in        TYPE bapi_te_catsdb,
          it_extension_in  TYPE STANDARD TABLE OF bapicats7,
          it_extension_out TYPE STANDARD TABLE OF bapicats7,
          wa_extension_in  TYPE bapicats7.

    DATA: l_costobj      TYPE p9027-kst01,
          l_lines        TYPE i,
          lt_position    TYPE TABLE OF plans,
          l_catsw        TYPE catsw,
          l_sobid        TYPE sobid,
          l_orgeh        TYPE orgeh,
          l_control_area TYPE kokrs,
          len_cctr_wbs   TYPE i.

    DATA: l_len TYPE i.
* Get Employee Number
    CALL METHOD settings_data_entered( ).



    LOOP AT it_outbox INTO wa_cats_entry.
      lv_tabix = sy-tabix.

      REFRESH: it_m_popover,
         it_return,
         it_cats_insert,
         it_cats_change,
         it_cats_delete,
         it_cats,
         it_ext_in,
         it_extension_in.
      CLEAR wa_ext_in.
* Worklist for Records
      IF wa_cats_entry-pln01 IS INITIAL .

        SELECT SINGLE plans kostl FROM pa0001 INTO (wa_cats_entry-pln01,l_costobj)
          WHERE pernr EQ wa_cats_entry-employeenumber
          AND endda GE sy-datum.

        CALL FUNCTION 'ZWF_GET_TIME_APPROVER'
          EXPORTING
            emp_position    = wa_cats_entry-pln01
            emp_pernr       = wa_cats_entry-employeenumber
          IMPORTING
            approver_userid = wa_cats_entry-zzapproverid
            approver_name   = wa_cats_entry-zzapprovername.

        SELECT SINGLE stext FROM hrp1000 INTO wa_cats_entry-zzpositiontext
                        WHERE otype = 'S'      AND
                         objid =   wa_cats_entry-pln01  AND
                         endda >= sy-datum.
      ENDIF.
      wa_ext_in-row = '1'.
      wa_ext_in-zzposition = wa_cats_entry-pln01.
      wa_ext_in-zzorgunittext = wa_cats_entry-zzorgunittext.
      wa_ext_in-zzapproverid = wa_cats_entry-zzapproverid.
      wa_ext_in-zzapprovername = wa_cats_entry-zzapprovername.
      wa_ext_in-zzpositiontext = wa_cats_entry-zzpositiontext.
      wa_ext_in-zzcostobjtext = wa_cats_entry-zzcostobjtext.
      APPEND wa_ext_in TO it_ext_in.

      wa_extension_in-structure = 'BAPI_TE_CATSDB'.
      wa_extension_in-valuepart1 = wa_ext_in.
      APPEND wa_extension_in TO it_extension_in.
      CLEAR wa_extension_in.

*New record checks for counter
      IF wa_cats_entry-counter IS INITIAL.

        MOVE-CORRESPONDING wa_cats_entry TO wa_cats_insert.
*     Seperate Cost center/ WBS based on front-end input
        len_cctr_wbs = strlen( wa_cats_entry-cctr_wbs ).
        IF len_cctr_wbs GT 10.
          wa_cats_insert-wbs_element = wa_cats_entry-cctr_wbs.
        ELSE.
          wa_cats_insert-rec_cctr = wa_cats_entry-cctr_wbs.
*        Cost Center or WBS controlling area search
          SELECT SINGLE kokrs FROM csks INTO
          wa_cats_insert-co_area WHERE kostl EQ wa_cats_insert-rec_cctr.
        ENDIF.

        IF wa_cats_entry-bonustype IS NOT INITIAL.
          SELECT SINGLE prakz FROM t510p INTO wa_cats_insert-bonusvalue WHERE
          prakn EQ wa_cats_entry-bonustype.
          wa_cats_insert-bonustype = wa_cats_entry-bonustype.
        ENDIF.

        wa_cats_insert-employeenumber = scr_pernr.
        wa_cats_insert-currency = 'USD'. "for valuation_basis
        APPEND wa_cats_insert TO it_cats_insert.
        CLEAR  wa_cats_insert.

        CALL FUNCTION 'BAPI_CATIMESHEETMGR_INSERT'
          EXPORTING
            profile         = scr_profile
          TABLES
            catsrecords_in  = it_cats_insert
            extensionin     = it_extension_in
            catsrecords_out = it_cats
            return          = it_return.
      ENDIF.

*   Delete Checks for Status Number
      IF wa_cats_entry-action_ind EQ 'D'.

        wa_cats_delete-counter  = wa_cats_entry-counter.
        APPEND wa_cats_delete TO it_cats_delete.

        CALL FUNCTION 'BAPI_CATIMESHEETMGR_DELETE'
          EXPORTING
            profile     = scr_profile
          TABLES
            catsrecords = it_cats_delete
            return      = it_return.
      ENDIF.

* Check whether record needs to changed
      IF wa_cats_entry-action_ind EQ 'E'. "
        MOVE-CORRESPONDING wa_cats_entry TO wa_cats_change.
*Seperate Cost center/ WBS based on front-end input
        len_cctr_wbs = strlen( wa_cats_entry-cctr_wbs ).
        IF len_cctr_wbs GT 10.
          wa_cats_change-wbs_element = wa_cats_entry-cctr_wbs.
        ELSE.
          wa_cats_change-rec_cctr = wa_cats_entry-cctr_wbs.
*        Cost Center or WBS controlling area search
          SELECT SINGLE kokrs FROM csks INTO
          wa_cats_change-co_area WHERE kostl EQ wa_cats_change-rec_cctr.
        ENDIF.
        IF wa_cats_entry-bonustype IS NOT INITIAL.
          SELECT SINGLE prakz FROM t510p INTO wa_cats_change-bonusvalue WHERE
          prakn EQ wa_cats_entry-bonustype.
          wa_cats_change-bonustype = wa_cats_entry-bonustype.
        ENDIF.
        wa_cats_change-employeenumber = scr_pernr.
        wa_cats_change-activity       = wa_cats_entry-avtivity.
        wa_cats_insert-position = wa_cats_entry-pln01.
        APPEND wa_cats_change TO it_cats_change.
        CLEAR  wa_cats_change.

        CALL FUNCTION 'BAPI_CATIMESHEETMGR_CHANGE'
          EXPORTING
            profile         = scr_profile
          TABLES
            catsrecords_in  = it_cats_change
            extensionin     = it_extension_in
            catsrecords_out = it_cats
            return          = it_return.
      ENDIF.
*   Commit Work
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'.
*   Delete Success/Info
*    delete it_return where type eq 'W'.
      DELETE it_return WHERE type EQ 'S'.
      DELETE it_return WHERE type EQ 'I'.


      LOOP AT it_return INTO wa_return.
        CASE wa_return-type.
          WHEN 'E'.
            wa_m_popover-tp = 'Error'.
            wa_m_popover-description = wa_return-message.
            wa_m_popover-title = wa_return-number.
            wa_m_popover-date = wa_cats_entry-workdate.
            wa_cats_entry-status_state = 'Error'.
            wa_cats_entry-status_text  = 'Error'(001).
            MODIFY it_outbox FROM wa_cats_entry INDEX lv_tabix.
*  clear wa_m_popover.
          WHEN 'W'.
            wa_m_popover-tp = 'Warning'.
            wa_m_popover-description = wa_return-message.
            wa_m_popover-title = wa_return-number.
            wa_m_popover-date = wa_cats_entry-workdate.
            DELETE it_outbox INDEX lv_tabix.
        ENDCASE.

        IF wa_cats_entry-counter IS INITIAL.
          wa_return-message_v4 = wa_cats_entry-uuid.
        ELSE.
          wa_return-message_v4 = wa_cats_entry-counter.
        ENDIF.
        APPEND wa_m_popover TO it_m_popover.
        CLEAR wa_m_popover.
      ENDLOOP.


      IF it_return IS INITIAL.
        DELETE it_outbox INDEX lv_tabix.
      ENDIF.

*--------------------------------------------------------------------
*   Update Page Entry Data
*--------------------------------------------------------------------
      READ TABLE it_cats INTO wa_cats WITH KEY counter = wa_cats_entry-counter.
*read table it_catswl into wa_catswl index 1.
      IF sy-subrc EQ 0.
        MOVE-CORRESPONDING wa_cats TO wa_cats_entry.
*  move-corresponding wa_catswl to wa_cats_entry.
*      Get Status
        SELECT SINGLE *
               FROM catsdb
               INTO wa_catsdb
               WHERE counter EQ wa_cats-counter.

        wa_cats_entry-status  = wa_catsdb-status.
*      Status Text
        SELECT SINGLE ddtext
               FROM dd07t
               INTO wa_cats_entry-status_text
               WHERE domname    EQ 'CATSSTATUS'
                 AND ddlanguage EQ sy-langu
                 AND as4local   EQ 'A'
                 AND domvalue_l EQ wa_cats_entry-status.

*      Set Status Text
        CASE wa_cats_entry-status.
          WHEN '20' OR '10'.
            wa_cats_entry-status_state = 'Warning'.

          WHEN '30'.
            wa_cats_entry-status_state = 'Success'.

          WHEN '40'.
            wa_cats_entry-status_state = 'Error'.

          WHEN OTHERS.
            wa_cats_entry-status_state = 'None'.
        ENDCASE.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ESS_TIMESHEET_ENTRY->SAVE_TABLE_CELL
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD save_table_cell.
*    data: it_t TYPE STANDARD TABLE OF ty_entry,
*          wa_t TYPE ty_entry.
**
*    LOOP AT IT_CATS_ENTRY_CELL INTO wa_CATS_ENTRY_CELL.
*      IF wa_CATS_ENTRY_CELL-day1 is not INITIAL.
*          wa_t-workdate = wa_CATS_ENTRY_CELL-day1.
*          wa_t-starttime =
*      ENDIF.
*    ENDLOOP.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ESS_TIMESHEET_ENTRY->SETTINGS_DATA_ENTERED
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD settings_data_entered.
*Whatever is entered by user on Settings Page is stored in scr variables
    DATA: lv_message TYPE REF TO if_hrpa_message_handler.

    scr_pernr =  wa_profile_data-pernr. "Entered Pernr
    scr_profile = wa_profile_data-variant. "Entered prrofile layout
    IF scr_pernr IS INITIAL.
      wa_cats_entry-status = '99'.
      EXIT.
    ENDIF.

* Get Molga
    CALL FUNCTION 'HR_ECM_GET_EE_MOLGA'
      EXPORTING
        pernr           = scr_pernr
        message_handler = lv_message
      IMPORTING
        molga           = gv_molga.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ESS_TIMESHEET_ENTRY->UPDATE_PROFILE
* +-------------------------------------------------------------------------------------------------+
* | [--->] SERVER                         TYPE REF TO /NEPTUNE/CL_NAD_SERVER
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD update_profile.

    TYPES: BEGIN OF ty_user_roles,
             agr_name TYPE agr_users-agr_name,
             uname    TYPE agr_users-uname,
           END OF ty_user_roles.

    TYPES: BEGIN OF ty_0001,
             pernr TYPE pa0001-pernr,
             persg TYPE pa0001-persg,
             persk TYPE pa0001-persk,
             sname TYPE pa0001-sname,
           END OF ty_0001.

    TYPES: BEGIN OF ty_0007,
             schkz TYPE pa0007-schkz,
             zterf TYPE pa0007-zterf,
           END OF ty_0007.

    DATA: it_entry      TYPE STANDARD TABLE OF field_selection,
          it_work       TYPE STANDARD TABLE OF field_selection,
          it_tcats      TYPE STANDARD TABLE OF tcats,
          wa_entry      LIKE LINE OF it_entry,
          wa_tcats      LIKE LINE OF it_tcats,
          lv_profile    TYPE catsvarian,
          it_9027       TYPE STANDARD TABLE OF pa9027,      "ty_9027,
          wa_9027       TYPE pa9027,                        "ty_9027,
          it_costobj    TYPE STANDARD TABLE OF pa9027,      "ty_9027,
          l_costobj     TYPE p9027-kst01,
          n             TYPE i,
          lv_count      TYPE i,
          lv_timetype   TYPE pa0007-zzcats_de_profile,
          lv_ptype      TYPE string,
          w_exitmessage TYPE /neptune/message,
          wa_profile    LIKE LINE OF it_profile.

    DATA: wa_0001               TYPE ty_0001,
          wa_0007               TYPE ty_0007,
          lv_lowerlimit_days(4) TYPE n,
          lv_upperlimit_days(4) TYPE n.

    DATA: start_date    TYPE sy-datum,
          end_date      TYPE sy-datum,
          friday_date   TYPE sy-datum,
          thursday_date TYPE sy-datum,
          lv_date_start TYPE sy-datum,
          lv_date_end   TYPE sy-datum.


    DATA: it_user_roles TYPE STANDARD TABLE OF ty_user_roles.

*Get User Personnel Number
    SELECT SINGLE pernr
           FROM pa0105
           INTO scr_pernr
           WHERE usrty EQ '0001'
             AND usrid EQ sy-uname
             AND endda GE sy-datum
             AND begda LE sy-datum.


*  To store Current PERNR in Global variable for Front-end validation purpose
    g_pernr-pernr = scr_pernr.


*Throw Message if pernr not found
    IF scr_pernr IS INITIAL .
      w_exitmessage-field_name = 'sapMessage'.
      w_exitmessage-type = 'E'.
      w_exitmessage-message = 'Personnel Number not found'.
      CALL METHOD server->api_message_create
        EXPORTING
          message = w_exitmessage.
      EXIT.
    ENDIF.


*set new pernr if changed by timeclerk
    IF scr_pernr NE wa_profile_data-pernr AND wa_profile_data-pernr NE '00000000'.
      scr_pernr = wa_profile_data-pernr."this value is passed from front-end
    ENDIF.

*Infotype 0001 details
    SELECT SINGLE pernr persg persk sname
      FROM pa0001 INTO wa_0001
       WHERE pernr EQ scr_pernr
      AND endda GE sy-datum.

*Infotype 0007 details
    SELECT SINGLE schkz zterf FROM pa0007
      INTO wa_0007 WHERE pernr EQ scr_pernr
       AND endda GE sy-datum.


* Get Profile Information, initially variant is always empty, select it from pa0007
    IF wa_profile_data-variant IS INITIAL.
      SELECT SINGLE zzcats_de_profile
                    zzcats_profile
        INTO (lv_profile,lv_timetype)
        FROM pa0007 WHERE pernr EQ scr_pernr
                    AND endda GE sy-datum.
    ELSE. "set variant entered by timeclerk
      lv_profile =  wa_profile_data-variant.
    ENDIF.

*ESS layout not found
    IF lv_profile IS INITIAL .
      w_exitmessage-field_name = 'sapMessage'.
      w_exitmessage-type = 'E'.
      w_exitmessage-message = 'Your set up is incomplete please maintain ESS layout in IT0007'.
      CALL METHOD server->api_message_create
        EXPORTING
          message = w_exitmessage.
      EXIT.
    ENDIF.

* further details on variants
    SELECT * FROM tcats
         INTO TABLE it_profile.

    READ TABLE it_profile INTO wa_profile WITH KEY variant = lv_profile.
    IF sy-subrc EQ 0.

*Set DEFAULTS
      wa_profile_data-variant = wa_profile-variant.  "wa_tcats-variant.

*Calculate number of days allowed to navigate in calendar based on profile setting
      CALL FUNCTION 'GET_WEEK_INFO_BASED_ON_DATE'
        EXPORTING
          date   = sy-datum
        IMPORTING
          monday = start_date
          sunday = end_date.

      friday_date = start_date - 2.   "Get previous week - friday date
      thursday_date = end_date - 2. "Get Present week - Thursday date

      lv_lowerlimit_days = wa_profile-perleft * 7.   "Returns 189 days if week set is 27
      lv_upperlimit_days = wa_profile-perright * 7.

      wa_profile_data-lower_date = friday_date - lv_lowerlimit_days.
      wa_profile_data-upper_date = thursday_date + lv_upperlimit_days.

*Additional pernr data
      wa_profile_data-pernr = wa_0001-pernr.
      wa_profile_data-persg = wa_0001-persg.
      wa_profile_data-persk = wa_0001-persk.
      wa_profile_data-sname = wa_0001-sname.
      wa_profile_data-schkz = wa_0007-schkz.
      wa_profile_data-zterf = wa_0007-zterf.
      wa_profile_data-ess_time_type = lv_timetype.

*setting value X for the user if he is authorized timeclerk
      SELECT agr_name uname FROM agr_users
      INTO TABLE it_user_roles
      WHERE to_dat GE sy-datum
        AND uname EQ sy-uname
        AND agr_name IN ('HR_TIME_COORD_CORE','HR_TIME_COORD_UNIV').

      IF sy-subrc EQ 0 .
        wa_profile_data-a_timeclerk = 'X'.
      ELSE.
        wa_profile_data-a_timeclerk = ''.
      ENDIF.

*----------------------------------------------------------------------------------------------
*Determining the layout for frontend based on ESS Time layout in 0007.
*PTYPE is the string which is passed to front-end. Based on the value of PTYPE
*Columns are hidden or visible using JS switch/case statements on front-end
*----------------------------------------------------------------------------------------------
      CASE wa_profile_data-variant.
        WHEN 'PLONG'.
          wa_profile_data-ptype = 'PLONG'.
        WHEN 'PSHORT'.
          wa_profile_data-ptype = 'PSHORT'.
        WHEN 'ACAHRS'.
          wa_profile_data-ptype = 'ACAHRS'.
        WHEN 'ACAHRSWL'.
          wa_profile_data-ptype = 'ACAHRSWL'.
        WHEN 'SHORT'.
          wa_profile_data-ptype = 'SHORT'.
        WHEN 'LONG'.
          wa_profile_data-ptype = 'LONG'.
* *  Only applicable to timeclerks (custom layout)
        WHEN 'ADMIN' OR 'ADMINREL'.
          wa_profile_data-ptype = 'ADM_LONG'.
**    endif.
      ENDCASE.

*  Forcing LONG layout - if personnel number is an S2 employee
      IF wa_profile_data-persk EQ 'S2' AND wa_profile_data-variant NA 'ADM'.
        wa_profile_data-ptype = 'LONG'.
      ENDIF.


**if personnel has one worklist item, set need worklist to initial (indicator to ignore if user has not selected worklist)
*      IF lv_count GT 1 OR wa_profile_data-persk EQ 'S2' .
*        wa_profile_data-needworklist = 'X'.
*      ELSE.
*        wa_profile_data-needworklist = ''.
*      ENDIF.
      APPEND wa_profile_data TO it_profile_data.
      CLEAR  wa_profile_data.
*    ENDLOOP.
    ENDIF.


* Get Default working Hours
    lv_date_start = sy-datum - lv_lowerlimit_days.
    lv_date_end   = sy-datum + lv_upperlimit_days.
    CALL FUNCTION 'CATS_GET_TARGET_HOURS'
      EXPORTING
        pernr                    = scr_pernr
        begda                    = lv_date_start
        endda                    = lv_date_end
      TABLES
        target_hours             = it_target
      EXCEPTIONS
        pernr_not_found          = 1
        too_many_days            = 2
        error_in_sap_enhancement = 3
        OTHERS                   = 4.

* Sorting
    SORT it_profile BY variant.
    READ TABLE it_profile_data INTO wa_profile_data WITH KEY variant = lv_profile.
    CLEAR lv_profile.


*get all pernr's for f4 Help
*********    CALL METHOD get_list_premn( ). """""""COMMENTED TO IMPROVE PERFORMANCE

*get att and absence types for the pernr
    CALL METHOD get_att_type( lv_timetype ).
    CALL METHOD get_att_type_leave( scr_pernr ).

*if profile is ADMIN and ADMINREL fetch premium data and wage types
    IF wa_profile_data-variant EQ 'ADMIN' OR wa_profile_data-variant EQ 'ADMINREL'.
      CALL METHOD get_data_wage( ).
      CALL METHOD get_premium_data( ).
      CALL METHOD get_pay_data( ).
    ENDIF.

*if profile is PREMIUM fetch premium data
    IF wa_profile_data-variant EQ 'PLONG' OR wa_profile_data-variant EQ 'PSHORT'.
      CALL METHOD get_premium_data( ).
    ENDIF.

*Get Employee and profile and store it into global variable
*    CALL METHOD get_employee_number( ).

  ENDMETHOD.
ENDCLASS.